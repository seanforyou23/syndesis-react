{"version":3,"sources":["modules/data/pages/VirtualizationCreatePage.tsx","modules/data/shared/VirtualizationNavBar.tsx","modules/data/pages/VirtualizationMetricsPage.tsx","modules/data/pages/VirtualizationRelationshipPage.tsx","modules/data/pages/VirtualizationsPage.tsx","modules/data/pages/VirtualizationSqlQueryPage.tsx","modules/data/shared/HeaderView.tsx","modules/data/pages/VirtualizationViewsPage.tsx","modules/data/DataApp.tsx"],"names":["VirtualizationCreatePage","formDefinition","virtDescription","componentProperty","deprecated","displayName","i18n","t","javaType","kind","order","required","secret","type","virtName","validate","v","errors","includes","react","utils","p","s","_ref","history","api","username","_ref2","createVirtualization","handleCreate","_ref3","Object","asyncToGenerator","regenerator_default","a","mark","_callee","value","wrap","_context","prev","next","push","resolvers","data","virtualizations","list","stop","_x","apply","this","arguments","es","ns","ui","Link","to","dashboard","root","auto_form","definition","initialValue","i18nRequiredProperty","onSave","_ref4","fields","handleSubmit","className","onClick","React","VirtualizationNavBar","style","background","label","routes","virtualization","views","relationship","sqlQuery","metrics","VirtualizationMetricsPage","VirtualizationNavBar_VirtualizationNavBar","VirtualizationRelationshipPage","filterByName","filterType","id","placeholder","title","filterTypes","sortByName","isNumeric","sortTypes","VirtualizationsPage","undefined","keng__id","virtualizationName","alert","_this","deleteVirtualization","publishVirtualization","unpublishServiceVdb","handleDelete","handlePublish","_callee2","_context2","_x2","handleUnpublish","_callee3","serviceVdbName","_context3","_x3","_ref5","hasData","error","defaultFilterType","defaultSortType","helpers","filteredAndSorted","activeFilters","currentSortType","isSortAscending","forEach","filter","valueToLower","toLowerCase","sort","thisVirtualization","thatVirtualization","localeCompare","getFilteredAndSortedVirtualizations","assign","state","resultsCount","length","i18nCreateDataVirtualization","i18nCreateDataVirtualizationTip","i18nDescription","i18nEmptyStateInfo","i18nEmptyStateTitle","i18nImport","i18nImportTip","i18nLinkCreateVirtualization","i18nName","i18nNameFilterPlaceholder","i18nResultsCount","count","i18nTitle","linkCreateHRef","create","onImport","handleImportVirt","hasListData","loading","loaderChildren","width","backgroundColor","marginTop","errorChildren","map","index","key","detailsPageLink","virtualizationDescription","tko__description","i18nCancelText","i18nDelete","i18nDeleteModalMessage","name","i18nDeleteModalTitle","i18nDraft","i18nEdit","i18nEditTip","i18nError","i18nExport","i18nPublished","i18nUnpublish","i18nPublish","onDelete","onEdit","handleEditVirtualization","onExport","handleExportVirtualization","onUnpublish","onPublish","currentPublishedState","publishedState","publishLogUrl","i18nPublishInProgress","i18nPublishLogUrlText","VirtualizationSqlQueryPage","HeaderView","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","virtualizationId","VirtualizationViewsPage","view","viewName","HeaderView_HeaderView","thisView","thatView","getFilteredAndSortedViews","i18nImportView","i18nImportViewTip","i18nCreateView","i18nCreateViewTip","onImportView","handleImportView","filterUndefinedId","viewDescription","handleDeleteView","handleEditView","DataApp","Switch","Redirect","path","exact","Route","component"],"mappings":"mQAUqBA,mLAEjB,IAAMC,EAAiB,CACrBC,gBAAiB,CACfC,mBAAmB,EACnBC,YAAY,EACZC,YAAaC,IAAKC,EAChB,wDAEFC,SAAU,mBACVC,KAAM,WACNC,MAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,KAAM,YAERC,SAAU,CACRX,mBAAmB,EACnBC,YAAY,EACZC,YAAaC,IAAKC,EAAE,iDACpBC,SAAU,mBACVC,KAAM,WACNC,MAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,KAAM,WAGJE,EAAW,SAACC,GAChB,IAAMC,EAAc,GAKpB,OAHID,EAAEF,SAASI,SAAS,OACtBD,EAAOH,SAAW,qDAEbG,GAGT,OACEE,EAAA,cAACC,EAAA,cAAD,KACG,SAACC,EAAGC,EAAJC,GAAA,IAASC,EAATD,EAASC,QAAT,OAECL,EAAA,cAACM,EAAA,0BAAD,CAA2BC,SAAS,aACjC,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,qBACIC,EAAY,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACbb,EACJS,EAAMvB,SACNuB,EAAMnC,iBAHW,OAMnBsB,EAAQkB,KAAKC,IAAUC,KAAKC,gBAAgBC,QANzB,wBAAAP,EAAAQ,SAAAX,MAAH,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,GAQlB,OACEhC,EAAA,cAACiC,EAAA,EAAD,CAAaC,GAAI,CAAC,OAAQ,WACvB,SAAA9C,GAAC,OACAY,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACmC,EAAA,WAAD,KACEnC,EAAA,cAACoC,EAAA,EAAD,CAAMC,GAAIb,IAAUc,UAAUC,QAC3BnD,EAAE,gBAELY,EAAA,cAACoC,EAAA,EAAD,CAAMC,GAAIb,IAAUC,KAAKc,QACtBnD,EAAE,+BAELY,EAAA,0BACGZ,EACC,uDAINY,EAAA,cAACmC,EAAA,UAAD,KACEnC,EAAA,wBACGZ,EACC,sDAGJY,EAAA,cAACwC,EAAA,SAAD,CACEC,WAAY3D,EACZ4D,aAAc,GACdC,qBAAsBvD,EACpB,4CAEFQ,SAAUA,EACVgD,OAAQlC,GAEP,SAAAmC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,aAAX,OACC/C,EAAA,cAACA,EAAA,SAAD,KACG8C,EACD9C,EAAA,wBACEN,KAAK,SACLsD,UAAU,kBACVC,QAASF,GAER3D,EAAE,oCA3FmB8D,qBCIjCC,mLAEjB,OACEnD,EAAA,cAACiC,EAAA,EAAD,CAAaC,GAAI,CAAC,OAAQ,WACvB,SAAA9C,GAAC,OACAY,EAAA,cAACmC,EAAA,UAAD,CACEiB,MAAO,CACLC,WAAY,SAGdrD,EAAA,cAACmC,EAAA,OAAD,KACEnC,EAAA,cAACmC,EAAA,WAAD,CACEmB,MAAOlE,EAAE,6BACTiD,GAAIkB,IAAO7B,gBAAgB8B,eAAeC,QAE5CzD,EAAA,cAACmC,EAAA,WAAD,CACEmB,MAAOlE,EAAE,oCACTiD,GAAIkB,IAAO7B,gBAAgB8B,eAAeE,eAE5C1D,EAAA,cAACmC,EAAA,WAAD,CACEmB,MAAOlE,EAAE,iCACTiD,GAAIkB,IAAO7B,gBAAgB8B,eAAeG,WAE5C3D,EAAA,cAACmC,EAAA,WAAD,CACEmB,MAAOlE,EAAE,+BACTiD,GAAIkB,IAAO7B,gBAAgB8B,eAAeI,qBAzBRV,aCU7BW,mLAEjB,OACE7D,EAAA,cAACiC,EAAA,EAAD,CAAaC,GAAI,CAAC,OAAQ,WACvB,SAAA9C,GAAC,OAAIY,EAAA,cAAC8D,EAAD,eAJyCZ,aCClCa,mLAEjB,OACE/D,EAAA,cAACiC,EAAA,EAAD,CAAaC,GAAI,CAAC,OAAQ,WACvB,SAAA9C,GAAC,OAAIY,EAAA,cAAC8D,EAAD,eAJ8CZ,sBCwB5D,IAAMc,EAAe,CACnBC,WAAY,OACZC,GAAI,OACJC,YAAahF,IAAKC,EAAE,kCACpBgF,MAAOjF,IAAKC,EAAE,gBAGViF,EAA6B,CAACL,GAE9BM,EAAa,CACjBJ,GAAI,OACJK,WAAW,EACXH,MAAOjF,IAAKC,EAAE,gBAGVoF,EAAyB,CAACF,OAMXG,4LACMjB,GACvB,YAAmCkB,IAA5BlB,EAAemB,kDAGAC,GAEtBC,MAAM,yBAA2BD,sDAKjCC,MAAM,6EAKNA,MAAM,2DAGQ,IAAAC,EAAA/C,KACd,OAEE/B,EAAA,cAACM,EAAA,0BAAD,CAA2BC,SAAS,aACjC,SAAAH,GAIK,IAHJ2E,EAGI3E,EAHJ2E,qBACAC,EAEI5E,EAFJ4E,sBACAC,EACI7E,EADJ6E,oBAEMC,EAAY,eAAA1E,EAAAI,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAO2D,GAAP,OAAA9D,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACbyD,EAAqBH,GADR,wBAAAxD,EAAAQ,SAAAX,MAAH,gBAAAY,GAAA,OAAArB,EAAAsB,MAAAC,KAAAC,YAAA,GAIZmD,EAAa,eAAAxE,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAoE,EAAOR,GAAP,OAAA9D,EAAAC,EAAAI,KAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,cAAA+D,EAAA/D,KAAA,EACd0D,EAAsBJ,GADR,wBAAAS,EAAAzD,SAAAwD,MAAH,gBAAAE,GAAA,OAAA3E,EAAAmB,MAAAC,KAAAC,YAAA,GAIbuD,EAAe,eAAA1C,EAAAjC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAwE,EAAOC,GAAP,OAAA3E,EAAAC,EAAAI,KAAA,SAAAuE,GAAA,cAAAA,EAAArE,KAAAqE,EAAApE,MAAA,cAAAoE,EAAApE,KAAA,EAChB2D,EAAoBQ,GADJ,wBAAAC,EAAA9D,SAAA4D,MAAH,gBAAAG,GAAA,OAAA9C,EAAAf,MAAAC,KAAAC,YAAA,GAIrB,OACEhC,EAAA,cAACM,EAAA,oBAAD,KACG,SAAAsF,GAAA,IAAGnE,EAAHmE,EAAGnE,KAAMoE,EAATD,EAASC,QAASC,EAAlBF,EAAkBE,MAAlB,OACC9F,EAAA,cAACC,EAAA,2BAAD,CACE8F,kBAAmB/B,EACnBgC,gBAAiB1B,GAEhB,SAAA2B,GACC,IAAMC,EAvG1B,SACExE,EACAyE,EACAC,EACAC,GAEA,IAAIH,EAAoBxE,EAwBxB,OAvBAyE,EAAcG,QAAQ,SAACC,GACrB,IAAMC,EAAeD,EAAOrF,MAAMuF,cAClCP,EAAoBA,EAAkBK,OACpC,SAAC/C,GAAD,OACEA,EAAemB,SAAS8B,cAAc1G,SAASyG,OAIrDN,EAAoBA,EAAkBQ,KACpC,SAACC,EAAoBC,GACnB,OAAIP,EACKM,EAAmBhC,SAASkC,cACjCD,EAAmBjC,UAKhBiC,EAAmBjC,SAASkC,cACjCF,EAAmBhC,YA8EmBmC,CACxBrF,EACAwE,EAAQE,cACRF,EAAQG,gBACRH,EAAQI,iBAGV,OACErG,EAAA,cAACiC,EAAA,EAAD,CAAaC,GAAI,CAAC,OAAQ,WACvB,SAAA9C,GAAC,OACAY,EAAA,cAACmC,EAAA,mBAADvB,OAAAmG,OAAA,CACE1C,YAAaA,EACbG,UAAWA,GACPM,EAAKkC,MAHX,CAIEC,aAAcf,EAAkBgB,QAC5BjB,EALN,CAMEkB,6BAA8B/H,EAC5B,2CAEFgI,gCAAiChI,EAC/B,8CAEFiI,gBAAiBjI,EACf,iDAEFkI,mBAAoBlI,EAClB,wCAEFmI,oBAAqBnI,EACnB,kCAEFoI,WAAYpI,EAAE,iBACdqI,cAAerI,EACb,0CAEFsI,6BAA8BtI,EAC5B,2CAEFuI,SAAUvI,EAAE,eACZwI,0BAA2BxI,EACzB,gCAEFyI,iBAAkBzI,EAAE,sBAAuB,CACzC0I,MAAO5B,EAAkBgB,SAE3Ba,UAAW3I,EACT,2CAEF4I,eAAgBxG,IAAUE,gBAAgBuG,SAC1CC,SAAUpD,EAAKqD,iBACfC,YAAa3G,EAAKyF,OAAS,IAE3BlH,EAAA,cAACC,EAAA,WAAD,CACE6F,MAAOA,EACPuC,SAAUxC,EACVyC,eACEtI,EAAA,cAACmC,EAAA,2BAAD,CACEoG,MAAO,IACPnF,MAAO,CACLoF,gBAAiB,OACjBC,UAAW,MAIjBC,cAAe1I,EAAA,kCAEd,kBACCkG,EAAkByC,IAChB,SACEnF,EACAoF,GAFF,OAIE5I,EAAA,cAACmC,EAAA,uBAAD,CACE0G,IAAKD,EACLE,gBAAiBtH,IAAUE,gBAAgB+B,MACzC,CAAED,mBAEJoB,mBACEpB,EAAemB,SAEjBoE,0BACEvF,EAAewF,iBACXxF,EAAewF,iBACf,GAENvD,eACEjC,EAAeiC,eAEjBwD,eAAgB7J,EAAE,iBAClB8J,WAAY9J,EAAE,iBACd+J,uBAAwB/J,EACtB,oCACA,CAAEgK,KAAM5F,EAAemB,WAEzB0E,qBAAsBjK,EACpB,mCAEFkK,UAAWlK,EAAE,gBACbmK,SAAUnK,EAAE,eACZoK,YAAapK,EACX,4CAEFqK,UAAWrK,EAAE,gBACbsK,WAAYtK,EAAE,iBACduK,cAAevK,EACb,8CAEFwK,cAAexK,EAAE,oBACjByK,YAAazK,EAAE,kBACf0K,SAAU5E,EACV6E,OAAQjF,EAAKkF,yBACbC,SAAUnF,EAAKoF,2BACfC,YAAa5E,EACb6E,UAAWjF,EACXkF,sBACE7G,EAAe8G,eAEjBC,cAAe,GACfC,sBAAuBpL,EACrB,oCAEFqL,sBAAuBrL,EACrB,yCA3KS8D,aC9C5BwH,mLAEjB,OACE1K,EAAA,cAACiC,EAAA,EAAD,CAAaC,GAAI,CAAC,OAAQ,WACvB,SAAA9C,GAAC,OAAIY,EAAA,cAAC8D,EAAD,eAJ0CZ,aCfnCyH,cAGnB,SAAAA,EAAmBC,GAA8C,OAAAhK,OAAAiK,EAAA,EAAAjK,CAAAmB,KAAA4I,GAAA/J,OAAAkK,EAAA,EAAAlK,CAAAmB,KAAAnB,OAAAmK,EAAA,EAAAnK,CAAA+J,GAAAK,KAAAjJ,KACzD6I,0EAIN,OACE5K,EAAA,cAACM,EAAA,mBAAD,CAAoB2K,iBAAkBlJ,KAAK6I,MAAMK,kBAC9C,SAAA7K,GAAA,IAAGqB,EAAHrB,EAAGqB,KAAMoE,EAATzF,EAASyF,QAASC,EAAlB1F,EAAkB0F,MAAlB,OACC9F,EAAA,cAACC,EAAA,WAAD,CACE6F,MAAOA,EACPuC,SAAUxC,EACVyC,eAAgBtI,EAAA,cAACmC,EAAA,OAAD,MAChBuG,cAAe1I,EAAA,kCAEd,kBACCA,EAAA,cAACmC,EAAA,UAAD,KACEnC,EAAA,wBAAKyB,EAAKkD,UACV3E,EAAA,wBAAKyB,EAAKuH,8BApBc9F,aCyDxC,IAAMc,EAAe,CACnBC,WAAY,OACZC,GAAI,OACJC,YAAahF,IAAKC,EAAE,kCACpBgF,MAAOjF,IAAKC,EAAE,gBAGViF,EAA6B,CAACL,GAE9BM,EAAa,CACjBJ,GAAI,OACJK,WAAW,EACXH,MAAOjF,IAAKC,EAAE,gBAGVoF,EAAyB,CAACF,GAEX4G,4LAIMC,GACvB,YAAyBzG,IAAlByG,EAAKxG,kDAGUyG,GAEtBvG,MAAM,eAAiBuG,4CAGDA,GAEtBvG,MAAM,eAAiBuG,4CAKvBvG,MAAM,+CAGQ,IAAAC,EAAA/C,KACd,OACE/B,EAAA,cAACC,EAAA,cAAD,KAIG,SAAAG,EAAAI,EAAAG,GAA2D,IAAxDsK,EAAwD7K,EAAxD6K,iBAAwDzK,EAAlCgD,eAAkC7C,EAAdN,QAC5C,OACEL,EAAA,yBACEA,EAAA,cAACqL,EAAD,CAAYJ,iBAAkBA,IAC9BjL,EAAA,cAACM,EAAA,UAAD,CAAW2K,iBAAkBA,GAC1B,SAAApI,GAAA,IAAGpB,EAAHoB,EAAGpB,KAAMoE,EAAThD,EAASgD,QAASC,EAAlBjD,EAAkBiD,MAAlB,OACC9F,EAAA,cAACC,EAAA,2BAAD,CACE8F,kBAAmB/B,EACnBgC,gBAAiB1B,GAEhB,SAAA2B,GACC,IAAMC,EAnF5B,SACEzC,EACA0C,EACAC,EACAC,GAEA,IAAIH,EAAoBzC,EAiBxB,OAhBA0C,EAAcG,QAAQ,SAACC,GACrB,IAAMC,EAAeD,EAAOrF,MAAMuF,cAClCP,EAAoBA,EAAkBK,OAAO,SAAC4E,GAAD,OAC3CA,EAAKxG,SAAS8B,cAAc1G,SAASyG,OAIzCN,EAAoBA,EAAkBQ,KAAK,SAAC4E,EAAUC,GACpD,OAAIlF,EACKiF,EAAS3G,SAASkC,cAAc0E,EAAS5G,UAI3C4G,EAAS5G,SAASkC,cAAcyE,EAAS3G,YA+DJ6G,CACxB/J,EACAwE,EAAQE,cACRF,EAAQG,gBACRH,EAAQI,iBAEV,OACErG,EAAA,cAACiC,EAAA,EAAD,CAAaC,GAAI,CAAC,OAAQ,WACvB,SAAA9C,GAAC,OACAY,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC8D,EAAD,MACA9D,EAAA,cAACmC,EAAA,SAADvB,OAAAmG,OAAA,CACE1C,YAAaA,EACbG,UAAWA,GACPM,EAAKkC,MAHX,CAIEC,aAAcf,EAAkBgB,QAC5BjB,EALN,CAMEoB,gBAAiBjI,EACf,4CAEFkI,mBAAoBlI,EAClB,0CAEFmI,oBAAqBnI,EACnB,2CAEFqM,eAAgBrM,EAAE,iBAClBsM,kBAAmBtM,EACjB,qCAEFuM,eAAgBvM,EAAE,iBAClBwM,kBAAmBxM,EACjB,qCAEFuI,SAAUvI,EAAE,eACZwI,0BAA2BxI,EACzB,gCAEFyI,iBAAkBzI,EAAE,sBAAuB,CACzC0I,MAAO5B,EAAkBgB,SAG3Bc,eAAgBxG,IAAUE,gBAAgBuG,SAC1C4D,aAAc/G,EAAKgH,iBACnB1D,YAAa3G,EAAKyF,OAAS,KAE7BlH,EAAA,cAACC,EAAA,WAAD,CACE6F,MAAOA,EACPuC,SAAUxC,EACVyC,eACEtI,EAAA,cAACmC,EAAA,iBAAD,CACEoG,MAAO,IACPnF,MAAO,CACLoF,gBAAiB,OACjBC,UAAW,MAIjBC,cAAe1I,EAAA,kCAEd,kBACCkG,EACGK,OAAO,SAAC4E,GAAD,OACNrG,EAAKiH,kBAAkBZ,KAExBxC,IACC,SACEwC,EACAvC,GAFF,OAIE5I,EAAA,cAACmC,EAAA,aAAD,CACE0G,IAAKD,EACLwC,SAAUD,EAAKxG,SACfqH,gBACE,wBAEF9C,WAAY9J,EAAE,iBACdmK,SAAUnK,EAAE,eACZoK,YAAapK,EAAE,oBACf0K,SAAUhF,EAAKmH,iBACflC,OAAQjF,EAAKoH,sCAxHFhJ,uDCzEhCiJ,mLAEjB,OACEnM,EAAA,cAACoM,EAAA,EAAD,KACEpM,EAAA,cAACqM,EAAA,EAAD,CACEC,KAAM/I,IAAOhB,KACbgK,OAAO,EACPlK,GAAIkB,IAAO7B,gBAAgBC,OAE7B3B,EAAA,cAACqM,EAAA,EAAD,CACEC,KAAM/I,IAAO7B,gBAAgB8B,eAAejB,KAC5CgK,OAAO,EACPlK,GAAIkB,IAAO7B,gBAAgB8B,eAAeC,QAE5CzD,EAAA,cAACwM,EAAA,EAAD,CACEF,KAAM/I,IAAO7B,gBAAgBC,KAC7B4K,OAAO,EACPE,UAAWhI,IAEbzE,EAAA,cAACwM,EAAA,EAAD,CACEF,KAAM/I,IAAO7B,gBAAgBuG,OAC7BsE,OAAO,EACPE,UAAW5N,IAEbmB,EAAA,cAACwM,EAAA,EAAD,CACEF,KAAM/I,IAAO7B,gBAAgB8B,eAAeC,MAC5C8I,OAAO,EACPE,UAAWvB,IAEblL,EAAA,cAACwM,EAAA,EAAD,CACEF,KAAM/I,IAAO7B,gBAAgB8B,eAAeE,aAC5C6I,OAAO,EACPE,UAAW1I,IAEb/D,EAAA,cAACwM,EAAA,EAAD,CACEF,KAAM/I,IAAO7B,gBAAgB8B,eAAeG,SAC5C4I,OAAO,EACPE,UAAW/B,IAEb1K,EAAA,cAACwM,EAAA,EAAD,CACEF,KAAM/I,IAAO7B,gBAAgB8B,eAAeI,QAC5C2I,OAAO,EACPE,UAAW5I,YA1CgBX","file":"static/js/Virtualizations.5bc08eef.chunk.js","sourcesContent":["import { WithVirtualizationHelpers } from '@syndesis/api';\nimport { AutoForm, IFormDefinition } from '@syndesis/auto-form';\nimport { Breadcrumb, Container } from '@syndesis/ui';\nimport { WithRouteData } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport i18n from '../../../i18n';\nimport resolvers from '../../resolvers';\n\nexport default class VirtualizationCreatePage extends React.Component {\n  public render() {\n    const formDefinition = {\n      virtDescription: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t(\n          'data:virtualization.virtualizationDescriptionDisplay'\n        ),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 1,\n        required: false,\n        secret: false,\n        type: 'textarea',\n      },\n      virtName: {\n        componentProperty: true,\n        deprecated: false,\n        displayName: i18n.t('data:virtualization.virtualizationNameDisplay'),\n        javaType: 'java.lang.String',\n        kind: 'property',\n        order: 0,\n        required: true,\n        secret: false,\n        type: 'string',\n      },\n    } as IFormDefinition;\n    const validate = (v: { virtName: string }) => {\n      const errors: any = {};\n      // TODO Incorporate service call to validate virtualization name\n      if (v.virtName.includes('?')) {\n        errors.virtName = 'Virtualization name contains an illegal character';\n      }\n      return errors;\n    };\n\n    return (\n      <WithRouteData<null, null>>\n        {(p, s, { history }) => (\n          // TODO need to retrieve real user here\n          <WithVirtualizationHelpers username=\"developer\">\n            {({ createVirtualization }) => {\n              const handleCreate = async (value: any) => {\n                await createVirtualization(\n                  value.virtName,\n                  value.virtDescription\n                );\n                // TODO: post toast notification\n                history.push(resolvers.data.virtualizations.list());\n              };\n              return (\n                <Translation ns={['data', 'shared']}>\n                  {t => (\n                    <>\n                      <Breadcrumb>\n                        <Link to={resolvers.dashboard.root()}>\n                          {t('shared:Home')}\n                        </Link>\n                        <Link to={resolvers.data.root()}>\n                          {t('shared:DataVirtualizations')}\n                        </Link>\n                        <span>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </span>\n                      </Breadcrumb>\n                      <Container>\n                        <h1>\n                          {t(\n                            'data:virtualization.createDataVirtualizationTitle'\n                          )}\n                        </h1>\n                        <AutoForm\n                          definition={formDefinition}\n                          initialValue={''}\n                          i18nRequiredProperty={t(\n                            'data:virtualization.requiredPropertyText'\n                          )}\n                          validate={validate}\n                          onSave={handleCreate}\n                        >\n                          {({ fields, handleSubmit }) => (\n                            <React.Fragment>\n                              {fields}\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-primary\"\n                                onClick={handleSubmit}\n                              >\n                                {t('shared:Create')}\n                              </button>\n                            </React.Fragment>\n                          )}\n                        </AutoForm>\n                      </Container>\n                    </>\n                  )}\n                </Translation>\n              );\n            }}\n          </WithVirtualizationHelpers>\n        )}\n      </WithRouteData>\n    );\n  }\n}\n","import { Container, TabBar, TabBarItem } from '@syndesis/ui';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport routes from '../routes';\n\n/**\n * A component that displays a nav bar with 4 items:\n *\n * 1. a link to the page that displays a list of Views\n * 2. a link to the page that displays relationships\n * 3. a link to the page that displays the SQL Query editor\n * 4. a link to the page that dispays metrics\n *\n */\nexport default class VirtualizationNavBar extends React.Component {\n  public render() {\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => (\n          <Container\n            style={{\n              background: '#fff',\n            }}\n          >\n            <TabBar>\n              <TabBarItem\n                label={t('data:virtualization.views')}\n                to={routes.virtualizations.virtualization.views}\n              />\n              <TabBarItem\n                label={t('data:virtualization.relationship')}\n                to={routes.virtualizations.virtualization.relationship}\n              />\n              <TabBarItem\n                label={t('data:virtualization.sqlClient')}\n                to={routes.virtualizations.virtualization.sqlQuery}\n              />\n              <TabBarItem\n                label={t('data:virtualization.metrics')}\n                to={routes.virtualizations.virtualization.metrics}\n              />\n            </TabBar>\n          </Container>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport VirtualizationNavBar from '../shared/VirtualizationNavBar';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationDetailRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualizationId - the extension whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationDetailRouteParams#virtualizationId}.\n * This is used to immediately show the details to the user, without\n * any loader; the backend will be called nonetheless to ensure that we are\n * working with the latest data available. This will be used when navigating from the\n * [VirtualizationsPage]{@link VirtualizationsPage}.\n */\nexport interface IVirtualizationDetailRouteState {\n  virtualization?: RestDataService;\n}\n\nexport default class VirtualizationMetricsPage extends React.Component {\n  public render() {\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => <VirtualizationNavBar />}\n      </Translation>\n    );\n\n    return 'TODO - Implement Metrics page';\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport VirtualizationNavBar from '../shared/VirtualizationNavBar';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationDetailRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualizationId - the extension whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationDetailRouteParams#virtualizationId}.\n * This is used to immediately show the details to the user, without\n * Translationeless to ensure that we are\n * Translationwill be used when navigating from the\n * Translationge}.\n */\n\nexport interface IVirtualizationDetailRouteState {\n  virtualization?: RestDataService;\n}\n\nexport default class VirtualizationRelationshipPage extends React.Component {\n  public render() {\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => <VirtualizationNavBar />}\n      </Translation>\n    );\n    return 'TODO - Implement Relationship page';\n  }\n}\n","import { WithVirtualizationHelpers, WithVirtualizations } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  VirtualizationList,\n  VirtualizationListItem,\n  VirtualizationListSkeleton,\n} from '@syndesis/ui';\nimport { WithListViewToolbarHelpers, WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport i18n from '../../../i18n';\nimport resolvers from '../resolvers';\n\nfunction getFilteredAndSortedVirtualizations(\n  virtualizations: RestDataService[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = virtualizations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter(\n      (virtualization: RestDataService) =>\n        virtualization.keng__id.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort(\n    (thisVirtualization, thatVirtualization) => {\n      if (isSortAscending) {\n        return thisVirtualization.keng__id.localeCompare(\n          thatVirtualization.keng__id\n        );\n      }\n\n      // sort descending\n      return thatVirtualization.keng__id.localeCompare(\n        thisVirtualization.keng__id\n      );\n    }\n  );\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport function getVirtualizationsHref(baseUrl: string): string {\n  return `${baseUrl}`;\n}\n\nexport default class VirtualizationsPage extends React.Component {\n  public filterUndefinedId(virtualization: RestDataService): boolean {\n    return virtualization.keng__id !== undefined;\n  }\n\n  public handleImportVirt(virtualizationName: string) {\n    // TODO: implement handleImportVirt\n    alert('Import virtualization ' + virtualizationName);\n  }\n\n  public handleEditVirtualization() {\n    // TODO: implement handleEditVirtualization\n    alert('Edit virtualization ');\n  }\n\n  public handleExportVirtualization() {\n    // TODO: implement handleExportVirtualization\n    alert('Export virtualization ');\n  }\n\n  public render() {\n    return (\n      // TODO need to retrieve real here\n      <WithVirtualizationHelpers username=\"developer\">\n        {({\n          deleteVirtualization,\n          publishVirtualization,\n          unpublishServiceVdb,\n        }) => {\n          const handleDelete = async (virtualizationName: string) => {\n            await deleteVirtualization(virtualizationName);\n            // TODO: post toast notification\n          };\n          const handlePublish = async (virtualizationName: string) => {\n            await publishVirtualization(virtualizationName);\n            // TODO: post toast notification\n          };\n          const handleUnpublish = async (serviceVdbName: string) => {\n            await unpublishServiceVdb(serviceVdbName);\n            // TODO: post toast notification\n          };\n          return (\n            <WithVirtualizations>\n              {({ data, hasData, error }) => (\n                <WithListViewToolbarHelpers\n                  defaultFilterType={filterByName}\n                  defaultSortType={sortByName}\n                >\n                  {helpers => {\n                    const filteredAndSorted = getFilteredAndSortedVirtualizations(\n                      data,\n                      helpers.activeFilters,\n                      helpers.currentSortType,\n                      helpers.isSortAscending\n                    );\n\n                    return (\n                      <Translation ns={['data', 'shared']}>\n                        {t => (\n                          <VirtualizationList\n                            filterTypes={filterTypes}\n                            sortTypes={sortTypes}\n                            {...this.state}\n                            resultsCount={filteredAndSorted.length}\n                            {...helpers}\n                            i18nCreateDataVirtualization={t(\n                              'virtualization.createDataVirtualization'\n                            )}\n                            i18nCreateDataVirtualizationTip={t(\n                              'virtualization.createDataVirtualizationTip'\n                            )}\n                            i18nDescription={t(\n                              'virtualization.virtualizationsPageDescription'\n                            )}\n                            i18nEmptyStateInfo={t(\n                              'virtualization.emptyStateInfoMessage'\n                            )}\n                            i18nEmptyStateTitle={t(\n                              'virtualization.emptyStateTitle'\n                            )}\n                            i18nImport={t('shared:Import')}\n                            i18nImportTip={t(\n                              'virtualization.importVirtualizationTip'\n                            )}\n                            i18nLinkCreateVirtualization={t(\n                              'virtualization.createDataVirtualization'\n                            )}\n                            i18nName={t('shared:Name')}\n                            i18nNameFilterPlaceholder={t(\n                              'shared:nameFilterPlaceholder'\n                            )}\n                            i18nResultsCount={t('shared:resultsCount', {\n                              count: filteredAndSorted.length,\n                            })}\n                            i18nTitle={t(\n                              'virtualization.virtualizationsPageTitle'\n                            )}\n                            linkCreateHRef={resolvers.virtualizations.create()}\n                            onImport={this.handleImportVirt}\n                            hasListData={data.length > 0}\n                          >\n                            <WithLoader\n                              error={error}\n                              loading={!hasData}\n                              loaderChildren={\n                                <VirtualizationListSkeleton\n                                  width={800}\n                                  style={{\n                                    backgroundColor: '#FFF',\n                                    marginTop: 30,\n                                  }}\n                                />\n                              }\n                              errorChildren={<div>TODO</div>}\n                            >\n                              {() =>\n                                filteredAndSorted.map(\n                                  (\n                                    virtualization: RestDataService,\n                                    index: number\n                                  ) => (\n                                    <VirtualizationListItem\n                                      key={index}\n                                      detailsPageLink={resolvers.virtualizations.views(\n                                        { virtualization }\n                                      )}\n                                      virtualizationName={\n                                        virtualization.keng__id\n                                      }\n                                      virtualizationDescription={\n                                        virtualization.tko__description\n                                          ? virtualization.tko__description\n                                          : ''\n                                      }\n                                      serviceVdbName={\n                                        virtualization.serviceVdbName\n                                      }\n                                      i18nCancelText={t('shared:Cancel')}\n                                      i18nDelete={t('shared:Delete')}\n                                      i18nDeleteModalMessage={t(\n                                        'virtualization.deleteModalMessage',\n                                        { name: virtualization.keng__id }\n                                      )}\n                                      i18nDeleteModalTitle={t(\n                                        'virtualization.deleteModalTitle'\n                                      )}\n                                      i18nDraft={t('shared:Draft')}\n                                      i18nEdit={t('shared:Edit')}\n                                      i18nEditTip={t(\n                                        'virtualization.editDataVirtualizationTip'\n                                      )}\n                                      i18nError={t('shared:Error')}\n                                      i18nExport={t('shared:Export')}\n                                      i18nPublished={t(\n                                        'virtualization.publishedDataVirtualization'\n                                      )}\n                                      i18nUnpublish={t('shared:Unpublish')}\n                                      i18nPublish={t('shared:Publish')}\n                                      onDelete={handleDelete}\n                                      onEdit={this.handleEditVirtualization}\n                                      onExport={this.handleExportVirtualization}\n                                      onUnpublish={handleUnpublish}\n                                      onPublish={handlePublish}\n                                      currentPublishedState={\n                                        virtualization.publishedState\n                                      }\n                                      publishLogUrl={''} // TODO set the generated url for the pod\n                                      i18nPublishInProgress={t(\n                                        'virtualization.publishInProgress'\n                                      )}\n                                      i18nPublishLogUrlText={t(\n                                        'shared:viewLogs'\n                                      )}\n                                    />\n                                  )\n                                )\n                              }\n                            </WithLoader>\n                          </VirtualizationList>\n                        )}\n                      </Translation>\n                    );\n                  }}\n                </WithListViewToolbarHelpers>\n              )}\n            </WithVirtualizations>\n          );\n        }}\n      </WithVirtualizationHelpers>\n    );\n  }\n}\n","import { RestDataService } from '@syndesis/models';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport VirtualizationNavBar from '../shared/VirtualizationNavBar';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationDetailRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualizationId - the extension whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationDetailRouteParams#virtualizationId}.\n * This is used to immediately show the details to the user, without\n * any loader; the backend will be called nonetheless to ensure that we are\n * working with the latest data available. This will be used when navigating from the\n * [VirtualizationsPage]{@linVirtualizationViewsPage.1k VirtualizationsPage}.\n */\nexport interface IVirtualizationDetailRouteState {\n  virtualization?: RestDataService;\n}\n\nexport default class VirtualizationSqlQueryPage extends React.Component {\n  public render() {\n    return (\n      <Translation ns={['data', 'shared']}>\n        {t => <VirtualizationNavBar />}\n      </Translation>\n    );\n    return 'TODO - Implement SQL Query page';\n  }\n}\n","import { WithVirtualization } from '@syndesis/api';\nimport { Container, Loader } from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\n\nexport interface IWithVirtualizationDetailHeaderProps {\n  virtualizationId: string;\n}\n\nexport default class HeaderView extends React.Component<\n  IWithVirtualizationDetailHeaderProps\n> {\n  public constructor(props: IWithVirtualizationDetailHeaderProps) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <WithVirtualization virtualizationId={this.props.virtualizationId}>\n        {({ data, hasData, error }) => (\n          <WithLoader\n            error={error}\n            loading={!hasData}\n            loaderChildren={<Loader />}\n            errorChildren={<div>TODO</div>}\n          >\n            {() => (\n              <Container>\n                <h2>{data.keng__id}</h2>\n                <h3>{data.tko__description}</h3>\n              </Container>\n            )}\n          </WithLoader>\n        )}\n      </WithVirtualization>\n    );\n  }\n}\n","import { WithViews } from '@syndesis/api';\nimport { RestDataService } from '@syndesis/models';\nimport { RestViewDefinition } from '@syndesis/models';\nimport * as React from 'react';\nimport i18n from '../../../i18n';\nimport HeaderView from '../shared/HeaderView';\nimport VirtualizationNavBar from '../shared/VirtualizationNavBar';\n\nimport {\n  IActiveFilter,\n  IFilterType,\n  ISortType,\n  ViewList,\n  ViewListItem,\n  ViewListSkeleton,\n} from '@syndesis/ui';\nimport {\n  WithListViewToolbarHelpers,\n  WithLoader,\n  WithRouteData,\n} from '@syndesis/utils';\nimport { Translation } from 'react-i18next';\nimport resolvers from '../resolvers';\n\n/**\n * @param virtualizationId - the ID of the virtualization whose details are being shown by this page.\n */\nexport interface IVirtualizationDetailRouteParams {\n  virtualizationId: string;\n}\n\n/**\n * @param virtualizationId - the virtualization whose details are being shown by this page. If\n * exists, it must equal to the [virtualizationId]{@link IVirtualizationDetailRouteParams#virtualizationId}.\n */\n\nexport interface IVirtualizationDetailRouteState {\n  virtualization?: RestDataService;\n}\n\nfunction getFilteredAndSortedViews(\n  views: RestViewDefinition[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSorted = views;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSorted = filteredAndSorted.filter((view: RestViewDefinition) =>\n      view.keng__id.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSorted = filteredAndSorted.sort((thisView, thatView) => {\n    if (isSortAscending) {\n      return thisView.keng__id.localeCompare(thatView.keng__id);\n    }\n\n    // sort descending\n    return thatView.keng__id.localeCompare(thisView.keng__id);\n  });\n\n  return filteredAndSorted;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: i18n.t('shared:filterByNamePlaceholder'),\n  title: i18n.t('shared:Name'),\n} as IFilterType;\n\nconst filterTypes: IFilterType[] = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: i18n.t('shared:Name'),\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class VirtualizationViewsPage extends React.Component<\n  IVirtualizationDetailRouteParams,\n  IVirtualizationDetailRouteState\n> {\n  public filterUndefinedId(view: RestViewDefinition): boolean {\n    return view.keng__id !== undefined;\n  }\n\n  public handleDeleteView(viewName: string) {\n    // TODO: implement handleImportVirt\n    alert('Import view ' + viewName);\n  }\n\n  public handleImportView(viewName: string) {\n    // TODO: implement handleImportView\n    alert('Import view ' + viewName);\n  }\n\n  public handleEditView() {\n    // TODO: implement handleEdit\n    alert('Edit view ');\n  }\n\n  public render() {\n    return (\n      <WithRouteData<\n        IVirtualizationDetailRouteParams,\n        IVirtualizationDetailRouteState\n      >>\n        {({ virtualizationId }, { virtualization }, { history }) => {\n          return (\n            <div>\n              <HeaderView virtualizationId={virtualizationId} />\n              <WithViews virtualizationId={virtualizationId}>\n                {({ data, hasData, error }) => (\n                  <WithListViewToolbarHelpers\n                    defaultFilterType={filterByName}\n                    defaultSortType={sortByName}\n                  >\n                    {helpers => {\n                      const filteredAndSorted = getFilteredAndSortedViews(\n                        data,\n                        helpers.activeFilters,\n                        helpers.currentSortType,\n                        helpers.isSortAscending\n                      );\n                      return (\n                        <Translation ns={['data', 'shared']}>\n                          {t => (\n                            <>\n                              <VirtualizationNavBar />\n                              <ViewList\n                                filterTypes={filterTypes}\n                                sortTypes={sortTypes}\n                                {...this.state}\n                                resultsCount={filteredAndSorted.length}\n                                {...helpers}\n                                i18nDescription={t(\n                                  'data:virtualization.viewsPageDescription'\n                                )}\n                                i18nEmptyStateInfo={t(\n                                  'data:virtualization.viewEmptyStateInfo'\n                                )}\n                                i18nEmptyStateTitle={t(\n                                  'data:virtualization.viewEmptyStateTitle'\n                                )}\n                                i18nImportView={t('shared:Import')}\n                                i18nImportViewTip={t(\n                                  'data:virtualization.importViewTip'\n                                )}\n                                i18nCreateView={t('shared:Create')}\n                                i18nCreateViewTip={t(\n                                  'data:virtualization.createViewTip'\n                                )}\n                                i18nName={t('shared:Name')}\n                                i18nNameFilterPlaceholder={t(\n                                  'shared:nameFilterPlaceholder'\n                                )}\n                                i18nResultsCount={t('shared:resultsCount', {\n                                  count: filteredAndSorted.length,\n                                })}\n                                // TODO - Point to views.create when available\n                                linkCreateHRef={resolvers.virtualizations.create()}\n                                onImportView={this.handleImportView}\n                                hasListData={data.length > 0}\n                              />\n                              <WithLoader\n                                error={error}\n                                loading={!hasData}\n                                loaderChildren={\n                                  <ViewListSkeleton\n                                    width={800}\n                                    style={{\n                                      backgroundColor: '#FFF',\n                                      marginTop: 30,\n                                    }}\n                                  />\n                                }\n                                errorChildren={<div>TODO</div>}\n                              >\n                                {() =>\n                                  filteredAndSorted\n                                    .filter((view: RestViewDefinition) =>\n                                      this.filterUndefinedId(view)\n                                    )\n                                    .map(\n                                      (\n                                        view: RestViewDefinition,\n                                        index: number\n                                      ) => (\n                                        <ViewListItem\n                                          key={index}\n                                          viewName={view.keng__id}\n                                          viewDescription={\n                                            'Description goes here'\n                                          }\n                                          i18nDelete={t('shared:Delete')}\n                                          i18nEdit={t('shared:Edit')}\n                                          i18nEditTip={t('view.editViewTip')}\n                                          onDelete={this.handleDeleteView}\n                                          onEdit={this.handleEditView}\n                                        />\n                                      )\n                                    )\n                                }\n                              </WithLoader>\n                            </>\n                          )}\n                        </Translation>\n                      );\n                    }}\n                  </WithListViewToolbarHelpers>\n                )}\n              </WithViews>\n            </div>\n          );\n        }}\n      </WithRouteData>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport VirtualizationCreatePage from './pages/VirtualizationCreatePage';\nimport VirtualizationMetricsPage from './pages/VirtualizationMetricsPage';\nimport VirtualizationRelationshipPage from './pages/VirtualizationRelationshipPage';\nimport VirtualizationsPage from './pages/VirtualizationsPage';\nimport VirtualizationSqlQueryPage from './pages/VirtualizationSqlQueryPage';\nimport VirtualizationViewsPage from './pages/VirtualizationViewsPage';\nimport routes from './routes';\n\nexport default class DataApp extends React.Component {\n  public render() {\n    return (\n      <Switch>\n        <Redirect\n          path={routes.root}\n          exact={true}\n          to={routes.virtualizations.list}\n        />\n        <Redirect\n          path={routes.virtualizations.virtualization.root}\n          exact={true}\n          to={routes.virtualizations.virtualization.views}\n        />\n        <Route\n          path={routes.virtualizations.list}\n          exact={true}\n          component={VirtualizationsPage}\n        />\n        <Route\n          path={routes.virtualizations.create}\n          exact={true}\n          component={VirtualizationCreatePage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.views}\n          exact={true}\n          component={VirtualizationViewsPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.relationship}\n          exact={true}\n          component={VirtualizationRelationshipPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.sqlQuery}\n          exact={true}\n          component={VirtualizationSqlQueryPage}\n        />\n        <Route\n          path={routes.virtualizations.virtualization.metrics}\n          exact={true}\n          component={VirtualizationMetricsPage}\n        />\n      </Switch>\n    );\n  }\n}\n"],"sourceRoot":""}