{"version":3,"sources":["modules/dashboard/pages/DashboardPage.tsx","modules/dashboard/DashboardApp.tsx"],"names":["getTimestamp","integration","updatedAt","createdAt","byTimestamp","a","b","aTimestamp","getConnectionHref","connection","concat","id","DashboardPage","react","api","_ref","integrationsData","data","hasIntegrations","hasData","_ref2","metricsData","_ref3","connectionsData","hasConnections","integrationStatesCount","items","reduce","counts","mi","stateCount","currentState","Object","objectSpread","defineProperty","Error","Pending","Published","Unpublished","recentlyUpdatedIntegrations","integrations","map","sort","slice","getRecentlyUpdatedIntegrations","topIntegrations","arguments","length","undefined","topIntegrationsArray","keys","key","count","miA","miB","index","findIndex","i","reverse","getTopIntegrations","es","ns","t","ui","linkToIntegrations","resolvers","list","linkToIntegrationCreation","create","start","selectConnection","linkToConnections","connections","linkToConnectionCreation","selectConnector","integrationsOverview","data-testid","title","totalCount","ok","error","connectionsOverview","i18nTitle","connectionsForDisplay","messagesOverview","messages","errors","uptimeOverview","parseInt","i18nLast30Days","numberOfDays","i18nLast60Days","i18nLast90Days","components","loading","integrationBoard","runningIntegrations","pendingIntegrations","stoppedIntegrations","i18nIntegrationStatePending","i18nIntegrationStateRunning","i18nIntegrationStateStopped","i18nIntegrations","i18nTotal","integrationUpdates","utils","loaderChildren","errorChildren","integrationName","name","integrationCurrentState","integrationDate","i18nError","i18nPublished","i18nUnpublished","shared","i18nConnections","i18nLinkCreateConnection","i18nLinkCreateIntegration","i18nLinkToConnections","i18nLinkToIntegrations","DashboardApp","Switch","Route","path","this","props","baseurl","exact","component","React"],"mappings":"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","file":"static/js/Dashboard.2417e735.chunk.js","sourcesContent":["import {\n  WithConnections,\n  WithIntegrationsMetrics,\n  WithMonitoredIntegrations,\n} from '@syndesis/api';\nimport {\n  Connection,\n  IntegrationOverview,\n  IntegrationWithOverview,\n} from '@syndesis/models';\nimport {\n  AggregatedMetricCard,\n  ConnectionsMetric,\n  Dashboard,\n  IntegrationBoard,\n  RecentUpdatesCard,\n  RecentUpdatesItem,\n  RecentUpdatesSkeleton,\n  TopIntegrationsCard,\n  UptimeMetric,\n} from '@syndesis/ui';\nimport { WithLoader } from '@syndesis/utils';\nimport * as React from 'react';\nimport { Translation } from 'react-i18next';\nimport { Connections } from '../../connections/shared';\nimport { Integrations } from '../../integrations/components';\nimport resolvers from '../../resolvers';\n\nexport interface IIntegrationCountsByState {\n  Error: number;\n  Pending: number;\n  Published: number;\n  Unpublished: number;\n}\n\nexport function getIntegrationsCountsByState(\n  integrations: IntegrationWithOverview[]\n): IIntegrationCountsByState {\n  return integrations.reduce(\n    (counts, mi) => {\n      const stateCount = counts[mi.integration.currentState!] || 0;\n      return {\n        ...counts,\n        [mi.integration.currentState!]: stateCount + 1,\n      };\n    },\n    {\n      Error: 0,\n      Pending: 0,\n      Published: 0,\n      Unpublished: 0,\n    } as IIntegrationCountsByState\n  );\n}\n\nexport function getTimestamp(integration: IntegrationOverview) {\n  return integration.updatedAt !== 0\n    ? integration.updatedAt\n    : integration.createdAt;\n}\n\nexport function byTimestamp(a: IntegrationOverview, b: IntegrationOverview) {\n  const aTimestamp = getTimestamp(a) || 0;\n  const bTimestamp = getTimestamp(b) || 0;\n  return bTimestamp - aTimestamp;\n}\n\nexport function getRecentlyUpdatedIntegrations(\n  integrations: IntegrationWithOverview[]\n): IntegrationOverview[] {\n  return integrations\n    .map(mi => mi.integration)\n    .sort(byTimestamp)\n    .slice(0, 5);\n}\n\nexport function getTopIntegrations(\n  integrations: IntegrationWithOverview[],\n  topIntegrations: { [name: string]: number } = {}\n): IntegrationWithOverview[] {\n  const topIntegrationsArray = Object.keys(topIntegrations)\n    .map(key => {\n      return {\n        count: topIntegrations[key],\n        id: key,\n      } as any;\n    })\n    .sort((a, b) => {\n      return b.count - a.count;\n    });\n\n  return integrations\n    .sort((miA, miB) => byTimestamp(miA.integration, miB.integration))\n    .sort((a, b) => {\n      const index = topIntegrationsArray.findIndex(\n        i => i.id === b.integration.id\n      );\n      return index === -1 ? topIntegrationsArray.length + 1 : index;\n    })\n    .reverse()\n    .slice(0, 5);\n}\n\nexport function getConnectionHref(connection: Connection) {\n  return `/connections/${connection.id}`;\n}\n\nexport default () => (\n  <WithMonitoredIntegrations>\n    {({ data: integrationsData, hasData: hasIntegrations }) => (\n      <WithIntegrationsMetrics>\n        {({ data: metricsData }) => (\n          <WithConnections>\n            {({ data: connectionsData, hasData: hasConnections }) => {\n              const integrationStatesCount = getIntegrationsCountsByState(\n                integrationsData.items\n              );\n              const recentlyUpdatedIntegrations = getRecentlyUpdatedIntegrations(\n                integrationsData.items\n              );\n              const topIntegrations = getTopIntegrations(\n                integrationsData.items,\n                metricsData.topIntegrations\n              );\n              return (\n                <Translation ns={['dashboard', 'integrations', 'shared']}>\n                  {t => (\n                    <Dashboard\n                      linkToIntegrations={resolvers.integrations.list()}\n                      linkToIntegrationCreation={resolvers.integrations.create.start.selectConnection()}\n                      linkToConnections={resolvers.connections.connections()}\n                      linkToConnectionCreation={resolvers.connections.create.selectConnector()}\n                      integrationsOverview={\n                        <div data-testid=\"total-integrations\">\n                          <AggregatedMetricCard\n                            title={t('titleTotalIntegrations', {\n                              count: integrationsData.totalCount,\n                            })}\n                            ok={\n                              integrationsData.totalCount -\n                              integrationStatesCount.Error\n                            }\n                            error={integrationStatesCount.Error}\n                          />\n                        </div>\n                      }\n                      connectionsOverview={\n                        <div data-testid=\"total-connections\">\n                          <ConnectionsMetric\n                            i18nTitle={t('titleTotalConnections', {\n                              count:\n                                connectionsData.connectionsForDisplay.length,\n                            })}\n                          />\n                        </div>\n                      }\n                      messagesOverview={\n                        <div data-testid=\"total-messages\">\n                          <AggregatedMetricCard\n                            title={t('titleTotalMessages', {\n                              count: metricsData.messages,\n                            })}\n                            ok={metricsData.messages! - metricsData.errors!}\n                            error={metricsData.errors!}\n                          />\n                        </div>\n                      }\n                      uptimeOverview={\n                        <UptimeMetric\n                          start={parseInt(metricsData.start!, 10)}\n                          i18nTitle={t('titleUptimeMetric')}\n                        />\n                      }\n                      topIntegrations={\n                        <TopIntegrationsCard\n                          i18nTitle={t('titleTopIntegrations', {\n                            count: 5,\n                          })}\n                          i18nLast30Days={t('lastNumberOfDays', {\n                            numberOfDays: 30,\n                          })}\n                          i18nLast60Days={t('lastNumberOfDays', {\n                            numberOfDays: 60,\n                          })}\n                          i18nLast90Days={t('lastNumberOfDays', {\n                            numberOfDays: 90,\n                          })}\n                        >\n                          <Integrations\n                            error={false}\n                            loading={!hasIntegrations}\n                            integrations={topIntegrations}\n                          />\n                        </TopIntegrationsCard>\n                      }\n                      integrationBoard={\n                        <IntegrationBoard\n                          runningIntegrations={integrationStatesCount.Published}\n                          pendingIntegrations={integrationStatesCount.Pending}\n                          stoppedIntegrations={\n                            integrationStatesCount.Unpublished\n                          }\n                          i18nTitle={t('titleIntegrationBoard')}\n                          i18nIntegrationStatePending={t(\n                            'integrationStatePending'\n                          )}\n                          i18nIntegrationStateRunning={t(\n                            'integrationStateRunning'\n                          )}\n                          i18nIntegrationStateStopped={t(\n                            'integrationStateStopped'\n                          )}\n                          i18nIntegrations={t('shared:Integrations')}\n                          i18nTotal={t('shared:Total')}\n                        />\n                      }\n                      integrationUpdates={\n                        <RecentUpdatesCard\n                          i18nTitle={t('titleIntegrationUpdates')}\n                        >\n                          <WithLoader\n                            error={false}\n                            loading={!hasIntegrations}\n                            loaderChildren={<RecentUpdatesSkeleton />}\n                            errorChildren={<div>TODO</div>}\n                          >\n                            {() =>\n                              recentlyUpdatedIntegrations.map(i => (\n                                <RecentUpdatesItem\n                                  key={i.id}\n                                  integrationName={i.name}\n                                  integrationCurrentState={i.currentState!}\n                                  integrationDate={i.updatedAt! || i.createdAt!}\n                                  i18nError={t('shared:Error')}\n                                  i18nPublished={t('shared:Published')}\n                                  i18nUnpublished={t('shared:Unpublished')}\n                                />\n                              ))\n                            }\n                          </WithLoader>\n                        </RecentUpdatesCard>\n                      }\n                      connections={\n                        <Connections\n                          error={false}\n                          loading={!hasConnections}\n                          connections={connectionsData.connectionsForDisplay}\n                          getConnectionHref={getConnectionHref}\n                        />\n                      }\n                      i18nConnections={t('shared:Connections')}\n                      i18nLinkCreateConnection={t(\n                        'shared:linkCreateConnection'\n                      )}\n                      i18nLinkCreateIntegration={t(\n                        'shared:linkCreateIntegration'\n                      )}\n                      i18nLinkToConnections={t('linkToConnections')}\n                      i18nLinkToIntegrations={t('linkToIntegrations')}\n                      i18nTitle={t('title')}\n                    />\n                  )}\n                </Translation>\n              );\n            }}\n          </WithConnections>\n        )}\n      </WithIntegrationsMetrics>\n    )}\n  </WithMonitoredIntegrations>\n);\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\nimport DashboardPage from './pages/DashboardPage';\n\nexport interface IDashboardAppProps {\n  baseurl: string;\n}\n\nexport default class DashboardApp extends React.Component<IDashboardAppProps> {\n  public render() {\n    return (\n      <Switch>\n        <Route\n          path={this.props.baseurl}\n          exact={true}\n          component={DashboardPage}\n        />\n      </Switch>\n    );\n  }\n}\n"],"sourceRoot":""}