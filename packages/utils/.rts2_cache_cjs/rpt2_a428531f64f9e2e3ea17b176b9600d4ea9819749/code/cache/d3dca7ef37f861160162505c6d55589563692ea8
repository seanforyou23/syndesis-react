{"code":"import { reverse } from 'named-urls';\r\n/**\r\n * Creates a function that takes a route and some `data` `T` that returns the\r\n * reversed URL.\r\n * Use `mapper` to write the business logic required to convert the `data` object\r\n * to the basic params that can be passed in an url (strings and numbers), and to\r\n * set the state object that will be pushed in the history together with the url.\r\n * @param route\r\n * @param mapper\r\n */\r\nexport function makeResolver(route, mapper) {\r\n    return (data) => {\r\n        const { params, state } = mapper(data);\r\n        return {\r\n            pathname: reverse(route, params),\r\n            state,\r\n        };\r\n    };\r\n}\r\n/**\r\n * Creates a function that takes a route and some `data` `T` that returns the\r\n * reversed URL.\r\n * @param route\r\n */\r\nexport function makeResolverNoParams(route) {\r\n    return () => reverse(route);\r\n}\r\n//# sourceMappingURL=makeResolver.js.map","map":"{\"version\":3,\"file\":\"makeResolver.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/makeResolver.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAOrC;;;;;;;;GAQG;AACH,MAAM,UAAU,YAAY,CAAI,KAAa,EAAE,MAA2B;IACxE,OAAO,CAAC,IAAO,EAAE,EAAE;QACjB,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACvC,OAAO;YACL,QAAQ,EAAE,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;YAChC,KAAK;SACN,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAa;IAChD,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/utils/utils/src/makeResolver.d.ts","writeByteOrderMark":false,"text":"export interface IRoute {\r\n    params?: any;\r\n    state?: any;\r\n}\r\n/**\r\n * Creates a function that takes a route and some `data` `T` that returns the\r\n * reversed URL.\r\n * Use `mapper` to write the business logic required to convert the `data` object\r\n * to the basic params that can be passed in an url (strings and numbers), and to\r\n * set the state object that will be pushed in the history together with the url.\r\n * @param route\r\n * @param mapper\r\n */\r\nexport declare function makeResolver<T>(route: string, mapper: (data: T) => IRoute): (data: T) => {\r\n    pathname: string;\r\n    state: any;\r\n};\r\n/**\r\n * Creates a function that takes a route and some `data` `T` that returns the\r\n * reversed URL.\r\n * @param route\r\n */\r\nexport declare function makeResolverNoParams(route: string): () => string;\r\n"}}
