{"code":"import * as React from 'react';\r\nexport class WithListViewToolbarHelpers extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onUpdateCurrentValue = (event) => {\r\n            this.setState({ currentValue: event.target.value });\r\n        };\r\n        this.onValueKeyPress = (keyEvent) => {\r\n            const { currentValue, currentFilterType } = this.state;\r\n            if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\r\n                this.setState({ currentValue: '' });\r\n                this.onFilterAdded(currentFilterType.title, currentValue);\r\n                keyEvent.stopPropagation();\r\n                keyEvent.preventDefault();\r\n            }\r\n        };\r\n        this.onFilterAdded = (title, value) => {\r\n            const { activeFilters } = this.state;\r\n            this.setState({\r\n                activeFilters: [\r\n                    ...activeFilters,\r\n                    {\r\n                        title,\r\n                        value,\r\n                    },\r\n                ],\r\n            });\r\n        };\r\n        this.onSelectFilterType = (filterType) => {\r\n            const { currentFilterType } = this.state;\r\n            if (currentFilterType !== filterType) {\r\n                this.setState({ currentValue: '', currentFilterType: filterType });\r\n            }\r\n        };\r\n        this.onFilterValueSelected = (filterValue) => {\r\n            const { currentFilterType } = this.state;\r\n            this.setState({ currentValue: filterValue.title });\r\n            if (filterValue) {\r\n                this.onFilterAdded(currentFilterType.title, filterValue.title);\r\n            }\r\n        };\r\n        this.onRemoveFilter = (filter) => {\r\n            const { activeFilters } = this.state;\r\n            const index = activeFilters.indexOf(filter);\r\n            if (index > -1) {\r\n                const updated = [\r\n                    ...activeFilters.slice(0, index),\r\n                    ...activeFilters.slice(index + 1),\r\n                ];\r\n                this.setState({ activeFilters: updated });\r\n            }\r\n        };\r\n        this.onClearFilters = (event) => {\r\n            event.preventDefault();\r\n            this.setState({ activeFilters: [] });\r\n        };\r\n        this.onToggleCurrentSortDirection = () => {\r\n            const { isSortAscending } = this.state;\r\n            this.setState({ isSortAscending: !isSortAscending });\r\n        };\r\n        this.onUpdateCurrentSortType = (sortType) => {\r\n            const { currentSortType } = this.state;\r\n            if (currentSortType !== sortType) {\r\n                this.setState({\r\n                    currentSortType: sortType,\r\n                    isSortAscending: true,\r\n                });\r\n            }\r\n        };\r\n        this.state = {\r\n            activeFilters: [],\r\n            currentFilterType: this.props.defaultFilterType,\r\n            currentSortType: this.props.defaultSortType.title,\r\n            currentValue: '',\r\n            filterCategory: null,\r\n            isSortAscending: true,\r\n        };\r\n    }\r\n    render() {\r\n        return this.props.children({\r\n            onClearFilters: this.onClearFilters,\r\n            onFilterAdded: this.onFilterAdded,\r\n            onFilterValueSelected: this.onFilterValueSelected,\r\n            onRemoveFilter: this.onRemoveFilter,\r\n            onSelectFilterType: this.onSelectFilterType,\r\n            onToggleCurrentSortDirection: this.onToggleCurrentSortDirection,\r\n            onUpdateCurrentSortType: this.onUpdateCurrentSortType,\r\n            onUpdateCurrentValue: this.onUpdateCurrentValue,\r\n            onValueKeyPress: this.onValueKeyPress,\r\n            ...this.state,\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=WithListViewToolbarHelpers.js.map","map":"{\"version\":3,\"file\":\"WithListViewToolbarHelpers.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/WithListViewToolbarHelpers.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/utils/utils/src/WithListViewToolbarHelpers.d.ts","writeByteOrderMark":false,"text":"import { IActiveFilter, IFilterType, ISortType } from '@syndesis/ui';\r\nimport * as React from 'react';\r\nexport interface IWithListViewToolbarHelpers extends IWithListViewToolbarHelpersState {\r\n    onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\r\n    onFilterAdded(title: string, value: string): void;\r\n    onFilterValueSelected(filterValue: {\r\n        id: string;\r\n        title: string;\r\n    }): void;\r\n    onRemoveFilter(filter: IActiveFilter): void;\r\n    onSelectFilterType(filterType: IFilterType): void;\r\n    onToggleCurrentSortDirection(): void;\r\n    onUpdateCurrentSortType(sortType: string): void;\r\n    onUpdateCurrentValue(event: Event): void;\r\n    onValueKeyPress(keyEvent: KeyboardEvent): void;\r\n}\r\nexport interface IWithListViewToolbarHelpersProps {\r\n    defaultFilterType: IFilterType;\r\n    defaultSortType: ISortType;\r\n    children(props: IWithListViewToolbarHelpers): any;\r\n}\r\nexport interface IWithListViewToolbarHelpersState {\r\n    activeFilters: IActiveFilter[];\r\n    currentFilterType: IFilterType;\r\n    currentSortType: string;\r\n    currentValue: any;\r\n    filterCategory: any;\r\n    isSortAscending: boolean;\r\n}\r\nexport declare class WithListViewToolbarHelpers extends React.Component<IWithListViewToolbarHelpersProps, IWithListViewToolbarHelpersState> {\r\n    constructor(props: IWithListViewToolbarHelpersProps);\r\n    onUpdateCurrentValue: (event: Event) => void;\r\n    onValueKeyPress: (keyEvent: KeyboardEvent) => void;\r\n    onFilterAdded: (title: string, value: string) => void;\r\n    onSelectFilterType: (filterType: IFilterType) => void;\r\n    onFilterValueSelected: (filterValue: {\r\n        id: string;\r\n        title: string;\r\n    }) => void;\r\n    onRemoveFilter: (filter: IActiveFilter) => void;\r\n    onClearFilters: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\r\n    onToggleCurrentSortDirection: () => void;\r\n    onUpdateCurrentSortType: (sortType: string) => void;\r\n    render(): any;\r\n}\r\n"}}
