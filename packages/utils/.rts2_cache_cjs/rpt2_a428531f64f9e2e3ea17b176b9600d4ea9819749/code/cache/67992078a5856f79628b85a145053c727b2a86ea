{"code":"const ALPHABET = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst RANDOMNESS = [];\r\nlet lastTimestamp = 0;\r\n/**\r\n * Generates lexically sortable unique keys based on:\r\n *\r\n * https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html\r\n *\r\n * You can also consider the generated kys to be like UUIDS except:\r\n * (1) strictly increment from the generating node's point of view\r\n * (2) loosely increment based on relative machine time when viewed across nodes.\r\n */\r\nexport function key() {\r\n    // first time setup.. initialize the randomness...\r\n    if (RANDOMNESS.length === 0) {\r\n        for (let i = 0; i < 12; i++) {\r\n            RANDOMNESS[i] = Math.floor(Math.random() * 64);\r\n        }\r\n    }\r\n    // we build the resulting key backwards. The most significant bits at the front of the key.\r\n    let result = '';\r\n    const timestamp = new Date().getTime();\r\n    // Lets encode the random part of the key. (72 bits of randomness)\r\n    // 72/6 = 12 base64 characters.\r\n    // increment randomness when we being called too keys too quickly.\r\n    if (timestamp === lastTimestamp) {\r\n        for (let i = 0; i < 12; i++) {\r\n            RANDOMNESS[i]++;\r\n            if (RANDOMNESS[i] === 64) {\r\n                RANDOMNESS[i] = 0; // we need to carry to the next random byte.\r\n            }\r\n            else {\r\n                break; // done incrementing.\r\n            }\r\n        }\r\n    }\r\n    for (let i = 0; i < 12; i++) {\r\n        result = ALPHABET.charAt(RANDOMNESS[i]) + result;\r\n    }\r\n    // Base64 encodes 6 bits of data per character. We want to encode\r\n    // 6 bytes of the timestamp (48 bits), 48/6 = 8 base64 chars for the ts part\r\n    // the key.\r\n    let remainingTimestamp = timestamp;\r\n    for (let i = 0; i < 8; i++) {\r\n        result = ALPHABET.charAt(remainingTimestamp % 64) + result;\r\n        remainingTimestamp = Math.floor(remainingTimestamp / 64);\r\n    }\r\n    lastTimestamp = timestamp;\r\n    return result;\r\n}\r\n//# sourceMappingURL=key.js.map","map":"{\"version\":3,\"file\":\"key.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/key.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,QAAQ,GACZ,kEAAkE,CAAC;AACrE,MAAM,UAAU,GAAa,EAAE,CAAC;AAChC,IAAI,aAAa,GAAG,CAAC,CAAC;AAEtB;;;;;;;;GAQG;AACH,MAAM,UAAU,GAAG;IACjB,kDAAkD;IAClD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;SAChD;KACF;IAED,2FAA2F;IAC3F,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;IAEvC,kEAAkE;IAClE,+BAA+B;IAE/B,kEAAkE;IAClE,IAAI,SAAS,KAAK,aAAa,EAAE;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;YAChB,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;gBACxB,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,4CAA4C;aAChE;iBAAM;gBACL,MAAM,CAAC,qBAAqB;aAC7B;SACF;KACF;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QAC3B,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;KAClD;IAED,iEAAiE;IACjE,4EAA4E;IAC5E,WAAW;IACX,IAAI,kBAAkB,GAAG,SAAS,CAAC;IACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,kBAAkB,GAAG,EAAE,CAAC,GAAG,MAAM,CAAC;QAC3D,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAAG,EAAE,CAAC,CAAC;KAC1D;IAED,aAAa,GAAG,SAAS,CAAC;IAC1B,OAAO,MAAM,CAAC;AAChB,CAAC\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/utils/utils/src/key.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Generates lexically sortable unique keys based on:\r\n *\r\n * https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html\r\n *\r\n * You can also consider the generated kys to be like UUIDS except:\r\n * (1) strictly increment from the generating node's point of view\r\n * (2) loosely increment based on relative machine time when viewed across nodes.\r\n */\r\nexport declare function key(): string;\r\n"}}
