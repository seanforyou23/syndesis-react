{"code":"import * as React from 'react';\r\n/**\r\n * A component to handle asynchronous data-loading. It will show the provided\r\n * loader component for a minimum amount of time - to avoid flash of loading\r\n * component - before invoking the children render prop.\r\n * It will also handle the error state rendering the provided error component\r\n * in case of errors loading the data.\r\n *\r\n * @see [error]{@link IWithLoaderProps#error}\r\n * @see [loading]{@link IWithLoaderProps#loading}\r\n * @see [minWait]{@link IWithLoaderProps#minWait}\r\n * @see [loaderChildren]{@link IWithLoaderProps#loaderChildren}\r\n * @see [errorChildren]{@link IWithLoaderProps#errorChildren}\r\n * @see [children]{@link IWithLoaderProps#children}\r\n */\r\nexport class WithLoader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: !this.props.loading,\r\n        };\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            loaded: !nextProps.loading,\r\n        });\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (!this.props.loading && !this.waitTimeout) {\r\n            this.setTimeout();\r\n        }\r\n    }\r\n    render() {\r\n        if (this.props.error) {\r\n            return this.props.errorChildren;\r\n        }\r\n        if (!this.state.loaded) {\r\n            return this.props.loaderChildren;\r\n        }\r\n        return this.props.children();\r\n    }\r\n    setTimeout() {\r\n        this.clearTimeout();\r\n        this.waitTimeout = window.setTimeout(() => {\r\n            this.setState({\r\n                loaded: true,\r\n            });\r\n        }, this.props.minWait);\r\n    }\r\n    clearTimeout() {\r\n        if (this.waitTimeout) {\r\n            clearTimeout(this.waitTimeout);\r\n            this.waitTimeout = undefined;\r\n        }\r\n    }\r\n}\r\nWithLoader.defaultProps = {\r\n    minWait: 500,\r\n};\r\n//# sourceMappingURL=WithLoader.js.map","map":"{\"version\":3,\"file\":\"WithLoader.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/WithLoader.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAuC/B;;;;;;;;;;;;;GAaG;AACH,MAAM,OAAO,UAAW,SAAQ,KAAK,CAAC,SAGrC;IAOC,YAAY,KAAuB;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO;SAC5B,CAAC;IACJ,CAAC;IAEM,yBAAyB,CAAC,SAA2B;QAC1D,IAAI,CAAC,QAAQ,CAAC;YACZ,MAAM,EAAE,CAAC,SAAS,CAAC,OAAO;SAC3B,CAAC,CAAC;IACL,CAAC;IAEM,kBAAkB,CAAC,SAA2B;QACnD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YAC5C,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;IACH,CAAC;IAEM,MAAM;QACX,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YACpB,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;SACjC;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACtB,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;SAClC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAES,UAAU;QAClB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YACxC,IAAI,CAAC,QAAQ,CAAC;gBACZ,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;QACL,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,OAAQ,CAAC,CAAC;IAC1B,CAAC;IAES,YAAY;QACpB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;SAC9B;IACH,CAAC;;AAjDa,uBAAY,GAAG;IAC3B,OAAO,EAAE,GAAG;CACb,CAAC\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/utils/utils/src/WithLoader.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nexport interface IWithLoaderProps {\r\n    /**\r\n     * If true, the [errorChildren]{@link IWithLoaderProps#errorChildren} will be\r\n     * rendered.\r\n     */\r\n    error: boolean;\r\n    /**\r\n     * If true, the [loaderChildren]{@link IWithLoaderProps#loaderChildren}\r\n     * will be rendered.\r\n     */\r\n    loading: boolean;\r\n    /**\r\n     * The minimum amount of time to wait before invoking the [children]{@link IWithLoaderProps#children}\r\n     * render prop. If high enough, it will avoid a flash of loading component.\r\n     * Defaults to 500ms.\r\n     */\r\n    minWait?: number;\r\n    /**\r\n     * The content to render when data is loading.\r\n     */\r\n    loaderChildren: JSX.Element;\r\n    /**\r\n     * The content to render when error occurred while loading data.\r\n     */\r\n    errorChildren: JSX.Element;\r\n    /**\r\n     * A render prop that will be invoked if both [loading]{@link IWithLoaderProps#loading}\r\n     * and [error]{@link IWithLoaderProps#error} are `false`.\r\n     */\r\n    children(): any;\r\n}\r\nexport interface IWithLoaderState {\r\n    loaded: boolean;\r\n}\r\n/**\r\n * A component to handle asynchronous data-loading. It will show the provided\r\n * loader component for a minimum amount of time - to avoid flash of loading\r\n * component - before invoking the children render prop.\r\n * It will also handle the error state rendering the provided error component\r\n * in case of errors loading the data.\r\n *\r\n * @see [error]{@link IWithLoaderProps#error}\r\n * @see [loading]{@link IWithLoaderProps#loading}\r\n * @see [minWait]{@link IWithLoaderProps#minWait}\r\n * @see [loaderChildren]{@link IWithLoaderProps#loaderChildren}\r\n * @see [errorChildren]{@link IWithLoaderProps#errorChildren}\r\n * @see [children]{@link IWithLoaderProps#children}\r\n */\r\nexport declare class WithLoader extends React.Component<IWithLoaderProps, IWithLoaderState> {\r\n    static defaultProps: {\r\n        minWait: number;\r\n    };\r\n    protected waitTimeout?: number;\r\n    constructor(props: IWithLoaderProps);\r\n    componentWillReceiveProps(nextProps: IWithLoaderProps): void;\r\n    componentDidUpdate(prevProps: IWithLoaderProps): void;\r\n    render(): any;\r\n    protected setTimeout(): void;\r\n    protected clearTimeout(): void;\r\n}\r\n"}}
