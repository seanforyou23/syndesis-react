{"code":"/**\r\n *\r\n * @param value the value being used\r\n * @returns the `OptionalInt` object created from the specified value\r\n */\r\nexport function createOptionalInt(value) {\r\n    return { present: true, asInt: value };\r\n}\r\n/**\r\n * @param optional the `OptionalInt` whose value is being requested\r\n * @param defaultValue the value to return if no value exists\r\n * @returns the int value (defaults to zero)\r\n */\r\nexport function optionalIntValue(optional, defaultValue = 0) {\r\n    if (optional && optional.present) {\r\n        const value = optional.asInt;\r\n        return value ? value : defaultValue;\r\n    }\r\n    return defaultValue;\r\n}\r\n/**\r\n * @param optional the value whose value is being checked\r\n * @returns true if the optional exists and there is a value\r\n */\r\nexport function optionalIntHasValue(optional) {\r\n    return optional && optional.present ? optional.present : false;\r\n}\r\n//# sourceMappingURL=OptionalIntUtil.js.map","map":"{\"version\":3,\"file\":\"OptionalIntUtil.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/OptionalIntUtil.ts\"],\"names\":[],\"mappings\":\"AAEA;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,KAAa;IAC7C,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;AACzC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAC9B,QAAiC,EACjC,eAAuB,CAAC;IAExB,IAAI,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE;QAChC,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC7B,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC;KACrC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,mBAAmB,CACjC,QAAiC;IAEjC,OAAO,QAAQ,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;AACjE,CAAC\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/utils/utils/src/OptionalIntUtil.d.ts","writeByteOrderMark":false,"text":"import { OptionalInt } from '@syndesis/models';\r\n/**\r\n *\r\n * @param value the value being used\r\n * @returns the `OptionalInt` object created from the specified value\r\n */\r\nexport declare function createOptionalInt(value: number): OptionalInt;\r\n/**\r\n * @param optional the `OptionalInt` whose value is being requested\r\n * @param defaultValue the value to return if no value exists\r\n * @returns the int value (defaults to zero)\r\n */\r\nexport declare function optionalIntValue(optional: OptionalInt | undefined, defaultValue?: number): number;\r\n/**\r\n * @param optional the value whose value is being checked\r\n * @returns true if the optional exists and there is a value\r\n */\r\nexport declare function optionalIntHasValue(optional: OptionalInt | undefined): boolean;\r\n"}}
