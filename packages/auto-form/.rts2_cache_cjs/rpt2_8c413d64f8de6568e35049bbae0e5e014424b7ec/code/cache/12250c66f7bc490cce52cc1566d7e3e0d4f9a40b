{"code":"import { Field } from 'formik';\r\nimport * as React from 'react';\r\nimport { FormCheckboxComponent, FormHiddenComponent, FormInputComponent, FormSelectComponent, FormTextAreaComponent, } from './widgets';\r\nexport class FormBuilder extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Converts a property configuration to some kind of input field\r\n         * @param props\r\n         */\r\n        this.getField = (props) => {\r\n            // Massage the value in the definition to an input type\r\n            const type = this.massageType(props.property);\r\n            const componentTypemaps = {\r\n                checkbox: FormCheckboxComponent,\r\n                hidden: FormHiddenComponent,\r\n                select: FormSelectComponent,\r\n                textarea: FormTextAreaComponent,\r\n            };\r\n            const validate = (value) => {\r\n                if (props.property.required && !value) {\r\n                    return this.props.i18nRequiredProperty;\r\n                }\r\n                return undefined;\r\n            };\r\n            return (React.createElement(Field, Object.assign({ key: props.property.name, name: props.property.name, type: type, validate: validate }, props, { component: componentTypemaps[type] || FormInputComponent })));\r\n        };\r\n    }\r\n    render() {\r\n        const fields = this.enrichAndOrderProperties(this.props.definition);\r\n        const massagedValue = this.sanitizeValues(this.props.definition, this.props.initialValue);\r\n        return this.props.children({\r\n            fields,\r\n            getField: this.getField,\r\n            initialValue: massagedValue,\r\n            onSave: this.props.onSave,\r\n        });\r\n    }\r\n    /**\r\n     * Ensure that the input values match the property definitions\r\n     */\r\n    sanitizeValues(definition, initialValue) {\r\n        return Object.keys(definition).reduce((result, key) => {\r\n            const prop = definition[key];\r\n            let value = this.massageValue(prop, initialValue[key]);\r\n            if (value == null) {\r\n                value = this.massageValue(prop, prop.defaultValue);\r\n            }\r\n            return { ...result, [key]: value };\r\n        }, {});\r\n    }\r\n    /**\r\n     * Add the 'name' field from the property ID and sort them by the 'order' property\r\n     */\r\n    enrichAndOrderProperties(definition) {\r\n        return Object.keys(definition)\r\n            .map(key => ({\r\n            ...definition[key],\r\n            name: key,\r\n            required: this.massageRequired(definition[key]),\r\n            type: this.massageType(definition[key]),\r\n        }))\r\n            .sort((a, b) => {\r\n            const aOrder = (a.order || 0);\r\n            const bOrder = (b.order || 0);\r\n            return aOrder - bOrder;\r\n        });\r\n    }\r\n    /**\r\n     * Converts various values passed into the property type to known input types\r\n     *\r\n     * @param property\r\n     */\r\n    massageType(property) {\r\n        let type = property.type || 'text';\r\n        switch (type) {\r\n            case 'int':\r\n            case 'integer':\r\n            case 'long':\r\n                type = 'number';\r\n                break;\r\n            case 'string':\r\n                type = 'text';\r\n                break;\r\n            case 'boolean':\r\n                type = 'checkbox';\r\n        }\r\n        if (property.enum && property.enum.length) {\r\n            type = 'select';\r\n        }\r\n        if (property.secret) {\r\n            type = 'password';\r\n        }\r\n        return type;\r\n    }\r\n    /**\r\n     * Ensure that the 'required' property is false for checkboxes and hidden fields\r\n     *\r\n     * This is a candidate for removal in the future, as it's a workaround\r\n     *\r\n     * @param property\r\n     */\r\n    massageRequired(property) {\r\n        switch (property.type) {\r\n            case 'boolean':\r\n            case 'checkbox':\r\n            case 'hidden':\r\n                return false;\r\n            default:\r\n                return property.required;\r\n        }\r\n    }\r\n    /**\r\n     * Converts the given value from a string to the type defined in the property definition\r\n     *\r\n     * This is a candidate for removal as it's a workaround\r\n     *\r\n     * @param property\r\n     * @param value\r\n     */\r\n    massageValue(property, value) {\r\n        if (value === undefined || value === null) {\r\n            return value;\r\n        }\r\n        switch (property.type) {\r\n            case 'number':\r\n                return parseInt(value, 10);\r\n            case 'boolean':\r\n            case 'checkbox':\r\n                return String(value).toLocaleLowerCase() === 'true';\r\n            default:\r\n                return value;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=FormBuilder.js.map","map":"{\"version\":3,\"file\":\"FormBuilder.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/FormBuilder.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/auto-form/auto-form/src/FormBuilder.d.ts","writeByteOrderMark":false,"text":"import { IConfigurationProperty } from '@syndesis/models';\r\nimport * as React from 'react';\r\nimport { IFormDefinition } from './models';\r\nexport interface INamedConfigurationProperty extends IConfigurationProperty {\r\n    name: string;\r\n}\r\nexport interface IRenderFieldProps {\r\n    property: INamedConfigurationProperty;\r\n    value: any;\r\n    [name: string]: any;\r\n}\r\nexport interface IFormBuilderProps<T> {\r\n    definition: IFormDefinition;\r\n    initialValue: T;\r\n    i18nRequiredProperty: string;\r\n    onSave: (value: T | any, actions: any) => void;\r\n    children(props: IFormBuilderState<T>): any;\r\n}\r\nexport interface IFormBuilderState<T> {\r\n    fields: INamedConfigurationProperty[];\r\n    getField: (props: IRenderFieldProps) => any;\r\n    initialValue: T;\r\n    onSave: (value: T, actions: any) => void;\r\n}\r\nexport declare class FormBuilder<T> extends React.Component<IFormBuilderProps<T>, IFormBuilderState<T>> {\r\n    /**\r\n     * Converts a property configuration to some kind of input field\r\n     * @param props\r\n     */\r\n    getField: (props: IRenderFieldProps) => any;\r\n    render(): any;\r\n    /**\r\n     * Ensure that the input values match the property definitions\r\n     */\r\n    private sanitizeValues;\r\n    /**\r\n     * Add the 'name' field from the property ID and sort them by the 'order' property\r\n     */\r\n    private enrichAndOrderProperties;\r\n    /**\r\n     * Converts various values passed into the property type to known input types\r\n     *\r\n     * @param property\r\n     */\r\n    private massageType;\r\n    /**\r\n     * Ensure that the 'required' property is false for checkboxes and hidden fields\r\n     *\r\n     * This is a candidate for removal in the future, as it's a workaround\r\n     *\r\n     * @param property\r\n     */\r\n    private massageRequired;\r\n    /**\r\n     * Converts the given value from a string to the type defined in the property definition\r\n     *\r\n     * This is a candidate for removal as it's a workaround\r\n     *\r\n     * @param property\r\n     * @param value\r\n     */\r\n    private massageValue;\r\n}\r\n"}}
