{"code":"import { Formik } from 'formik';\r\nimport * as React from 'react';\r\nimport { FormBuilder } from './FormBuilder';\r\nexport class AutoForm extends React.Component {\r\n    render() {\r\n        return (React.createElement(React.Fragment, null,\r\n            React.createElement(FormBuilder, { definition: this.props.definition, initialValue: this.props.initialValue, onSave: this.props.onSave, i18nRequiredProperty: this.props.i18nRequiredProperty }, ({ initialValue, fields, onSave, getField }) => (React.createElement(Formik, { initialValues: initialValue, onSubmit: onSave, validate: this.props.validate }, ({ handleSubmit, values, touched, errors, isValid, isValidating, isSubmitting, resetForm, submitForm, }) => this.props.children({\r\n                errors,\r\n                fields: (React.createElement(React.Fragment, null, fields.map(property => getField({\r\n                    errors,\r\n                    property,\r\n                    touched,\r\n                    value: (values || {})[property.name],\r\n                })))),\r\n                handleSubmit,\r\n                isSubmitting,\r\n                isValid,\r\n                isValidating,\r\n                resetForm,\r\n                submitForm,\r\n                values,\r\n            }))))));\r\n    }\r\n}\r\n//# sourceMappingURL=AutoForm.js.map","map":"{\"version\":3,\"file\":\"AutoForm.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/AutoForm.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAgD5C,MAAM,OAAO,QAAY,SAAQ,KAAK,CAAC,SAGtC;IACQ,MAAM;QACX,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ;YACb,oBAAC,WAAW,IACV,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EACjC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACrC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EACzB,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,IAEpD,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAC/C,oBAAC,MAAM,IACL,aAAa,EAAE,YAAY,EAC3B,QAAQ,EAAE,MAAM,EAChB,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,IAE5B,CAAC,EACA,YAAY,EACZ,MAAM,EACN,OAAO,EACP,MAAM,EACN,OAAO,EACP,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,UAAU,GACX,EAAE,EAAE,CACH,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAClB,MAAM;gBACN,MAAM,EAAE,CACN,oBAAC,KAAK,CAAC,QAAQ,QACZ,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CACrB,QAAQ,CAAC;oBACP,MAAM;oBACN,QAAQ;oBACR,OAAO;oBACP,KAAK,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;iBACrC,CAAC,CACH,CACc,CAClB;gBACD,YAAY;gBACZ,YAAY;gBACZ,OAAO;gBACP,YAAY;gBACZ,SAAS;gBACT,UAAU;gBACV,MAAM;aACP,CAAC,CAEG,CACV,CACW,CACC,CAClB,CAAC;IACJ,CAAC;CACF\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/auto-form/auto-form/src/AutoForm.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { IFormDefinition, IFormErrors } from './models';\r\nexport interface IAutoFormProps<T> {\r\n    /**\r\n     * A map of configuration properties as returned by the Syndesis API\r\n     */\r\n    definition: IFormDefinition;\r\n    /**\r\n     * The initial value that should be set on the form\r\n     */\r\n    initialValue: T;\r\n    /**\r\n     * String to be displayed when a required field isn't set\r\n     */\r\n    i18nRequiredProperty: string;\r\n    /**\r\n     * Callback function that will be called when the form is submitted\r\n     */\r\n    onSave: (value: T, actions: any) => void;\r\n    /**\r\n     * Validation function called whenever a change or blur event occurs on the form\r\n     */\r\n    validate?: (value: T | any) => IFormErrors | Promise<any> | undefined;\r\n    /**\r\n     * Child component that will receive the form fields and submit handler\r\n     */\r\n    children: (state: IAutoFormState) => any;\r\n}\r\nexport interface IAutoFormState {\r\n    /**\r\n     * Fragment containing all of the form fields\r\n     */\r\n    fields: JSX.Element;\r\n    /**\r\n     * Function to trigger a form submit which will then trigger onSave\r\n     */\r\n    handleSubmit: (e?: any) => void;\r\n    isSubmitting: boolean;\r\n    isValid: boolean;\r\n    isValidating: boolean;\r\n    resetForm: (nextValues?: any) => void;\r\n    submitForm: () => void;\r\n    values: any;\r\n    errors: any;\r\n}\r\nexport declare class AutoForm<T> extends React.Component<IAutoFormProps<T>, IAutoFormState> {\r\n    render(): JSX.Element;\r\n}\r\n"}}
