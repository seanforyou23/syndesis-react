{"version":3,"file":"auto-form.umd.js","sources":["../src/widgets/helpers.ts","../src/widgets/FormInputComponent.tsx","../src/widgets/FormSelectComponent.tsx","../src/widgets/FormTextAreaComponent.tsx","../src/widgets/FormCheckboxComponent.tsx","../src/widgets/FormHiddenComponent.tsx","../src/FormBuilder.tsx","../src/AutoForm.tsx"],"sourcesContent":["import { IFormControl } from '../models';\n\nexport function getValidationState({ form, field }: IFormControl) {\n  return form.touched[field.name] && form.errors[field.name]\n    ? 'error'\n    : form.touched[field.name]\n    ? 'success'\n    : null;\n}\n","import {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormInputComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    <FormControl\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      placeholder={props.property.placeholder}\n      type={props.type || 'text'}\n      onChange={props.field.onChange}\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormSelectComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    <FormControl\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      componentClass=\"select\"\n    >\n      {props.property.enum &&\n        props.property.enum.map((opt: any) => (\n          <option key={opt.value} value={opt.value}>\n            {opt.label}\n          </option>\n        ))}\n    </FormControl>\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n} from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormTextAreaComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <ControlLabel>{props.property.displayName}</ControlLabel>\n    <FormControl\n      {...props.field}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n      componentClass=\"textarea\"\n    />\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import { Checkbox, FormGroup, HelpBlock } from 'patternfly-react';\nimport * as React from 'react';\nimport { IFormControl } from '../models';\nimport { getValidationState } from './helpers';\n\nexport const FormCheckboxComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  <FormGroup\n    controlId={props.field.name}\n    validationState={getValidationState(props)}\n  >\n    <Checkbox\n      {...props.field}\n      id={props.field.name}\n      checked={props.field.value}\n      data-testid={props.field.name}\n      disabled={props.form.isSubmitting || props.property.disabled}\n    >\n      {props.property.displayName}\n    </Checkbox>\n    <HelpBlock>\n      {props.property.description}\n      {props.form.errors[props.field.name]}\n    </HelpBlock>\n  </FormGroup>\n);\n","import * as React from 'react';\nimport { IFormControl } from '../models';\n\nexport const FormHiddenComponent: React.FunctionComponent<\n  IFormControl\n> = props => (\n  // TODO replace with PF3/PF4 widget\n  <div>\n    <input\n      type={props.type}\n      id={props.name}\n      data-testid={props.name}\n      {...props.field}\n    />\n    {props.form.touched[props.field.name] &&\n      props.form.errors[props.field.name] && (\n        <div className=\"error\">{props.form.errors[props.field.name]}</div>\n      )}\n  </div>\n);\n","import { IConfigurationProperty } from '@syndesis/models';\nimport { Field } from 'formik';\nimport * as React from 'react';\nimport { IFormDefinition } from './models';\nimport {\n  FormCheckboxComponent,\n  FormHiddenComponent,\n  FormInputComponent,\n  FormSelectComponent,\n  FormTextAreaComponent,\n} from './widgets';\n\nexport interface INamedConfigurationProperty extends IConfigurationProperty {\n  name: string;\n}\n\nexport interface IRenderFieldProps {\n  property: INamedConfigurationProperty;\n  value: any;\n  [name: string]: any;\n}\n\nexport interface IFormBuilderProps<T> {\n  definition: IFormDefinition;\n  initialValue: T;\n  i18nRequiredProperty: string;\n  onSave: (value: T | any, actions: any) => void;\n  children(props: IFormBuilderState<T>): any;\n}\n\nexport interface IFormBuilderState<T> {\n  fields: INamedConfigurationProperty[];\n  getField: (props: IRenderFieldProps) => any;\n  initialValue: T;\n  onSave: (value: T, actions: any) => void;\n}\n\nexport class FormBuilder<T> extends React.Component<\n  IFormBuilderProps<T>,\n  IFormBuilderState<T>\n> {\n  /**\n   * Converts a property configuration to some kind of input field\n   * @param props\n   */\n  public getField = (props: IRenderFieldProps): any => {\n    // Massage the value in the definition to an input type\n    const type = this.massageType(props.property);\n    const componentTypemaps = {\n      checkbox: FormCheckboxComponent,\n      hidden: FormHiddenComponent,\n      select: FormSelectComponent,\n      textarea: FormTextAreaComponent,\n    };\n    const validate = (value: any) => {\n      if (props.property.required && !value) {\n        return this.props.i18nRequiredProperty;\n      }\n      return undefined;\n    };\n    return (\n      <Field\n        key={props.property.name}\n        name={props.property.name}\n        type={type}\n        validate={validate}\n        {...props}\n        component={componentTypemaps[type] || FormInputComponent}\n      />\n    );\n  };\n\n  public render() {\n    const fields = this.enrichAndOrderProperties(this.props.definition);\n    const massagedValue = this.sanitizeValues(\n      this.props.definition,\n      this.props.initialValue\n    );\n    return this.props.children({\n      fields,\n      getField: this.getField,\n      initialValue: massagedValue,\n      onSave: this.props.onSave,\n    });\n  }\n\n  /**\n   * Ensure that the input values match the property definitions\n   */\n  private sanitizeValues(definition: IFormDefinition, initialValue: any): T {\n    return Object.keys(definition).reduce((result, key): any => {\n      const prop = definition[key];\n      let value = this.massageValue(prop, initialValue[key]);\n      if (value == null) {\n        value = this.massageValue(prop, prop.defaultValue);\n      }\n      return { ...result, [key]: value };\n    }, {}) as T;\n  }\n\n  /**\n   * Add the 'name' field from the property ID and sort them by the 'order' property\n   */\n  private enrichAndOrderProperties(definition: IFormDefinition) {\n    return Object.keys(definition)\n      .map(key => ({\n        ...definition[key],\n        name: key,\n        required: this.massageRequired(definition[key]),\n        type: this.massageType(definition[key]),\n      }))\n      .sort((a, b) => {\n        const aOrder = (a.order || 0) as number;\n        const bOrder = (b.order || 0) as number;\n        return aOrder - bOrder;\n      });\n  }\n\n  /**\n   * Converts various values passed into the property type to known input types\n   *\n   * @param property\n   */\n  private massageType(property: IConfigurationProperty) {\n    let type = property.type || 'text';\n    switch (type) {\n      case 'int':\n      case 'integer':\n      case 'long':\n        type = 'number';\n        break;\n      case 'string':\n        type = 'text';\n        break;\n      case 'boolean':\n        type = 'checkbox';\n    }\n    if (property.enum && property.enum.length) {\n      type = 'select';\n    }\n    if (property.secret) {\n      type = 'password';\n    }\n    return type;\n  }\n\n  /**\n   * Ensure that the 'required' property is false for checkboxes and hidden fields\n   *\n   * This is a candidate for removal in the future, as it's a workaround\n   *\n   * @param property\n   */\n  private massageRequired(property: IConfigurationProperty): any {\n    switch (property.type) {\n      case 'boolean':\n      case 'checkbox':\n      case 'hidden':\n        return false;\n      default:\n        return property.required;\n    }\n  }\n\n  /**\n   * Converts the given value from a string to the type defined in the property definition\n   *\n   * This is a candidate for removal as it's a workaround\n   *\n   * @param property\n   * @param value\n   */\n  private massageValue(property: IConfigurationProperty, value?: string) {\n    if (value === undefined || value === null) {\n      return value;\n    }\n    switch (property.type) {\n      case 'number':\n        return parseInt(value, 10);\n      case 'boolean':\n      case 'checkbox':\n        return String(value).toLocaleLowerCase() === 'true';\n      default:\n        return value;\n    }\n  }\n}\n","import { Formik } from 'formik';\nimport * as React from 'react';\nimport { FormBuilder } from './FormBuilder';\nimport { IFormDefinition, IFormErrors } from './models';\n\nexport interface IAutoFormProps<T> {\n  /**\n   * A map of configuration properties as returned by the Syndesis API\n   */\n  definition: IFormDefinition;\n  /**\n   * The initial value that should be set on the form\n   */\n  initialValue: T;\n  /**\n   * String to be displayed when a required field isn't set\n   */\n  i18nRequiredProperty: string;\n  /**\n   * Callback function that will be called when the form is submitted\n   */\n  onSave: (value: T, actions: any) => void;\n  /**\n   * Validation function called whenever a change or blur event occurs on the form\n   */\n  validate?: (value: T | any) => IFormErrors | Promise<any> | undefined;\n  /**\n   * Child component that will receive the form fields and submit handler\n   */\n  children: (state: IAutoFormState) => any;\n}\n\nexport interface IAutoFormState {\n  /**\n   * Fragment containing all of the form fields\n   */\n  fields: JSX.Element;\n  /**\n   * Function to trigger a form submit which will then trigger onSave\n   */\n  handleSubmit: (e?: any) => void;\n  isSubmitting: boolean;\n  isValid: boolean;\n  isValidating: boolean;\n  resetForm: (nextValues?: any) => void;\n  submitForm: () => void;\n  values: any;\n  errors: any;\n}\n\nexport class AutoForm<T> extends React.Component<\n  IAutoFormProps<T>,\n  IAutoFormState\n> {\n  public render() {\n    return (\n      <React.Fragment>\n        <FormBuilder\n          definition={this.props.definition}\n          initialValue={this.props.initialValue}\n          onSave={this.props.onSave}\n          i18nRequiredProperty={this.props.i18nRequiredProperty}\n        >\n          {({ initialValue, fields, onSave, getField }) => (\n            <Formik<T>\n              initialValues={initialValue}\n              onSubmit={onSave}\n              validate={this.props.validate}\n            >\n              {({\n                handleSubmit,\n                values,\n                touched,\n                errors,\n                isValid,\n                isValidating,\n                isSubmitting,\n                resetForm,\n                submitForm,\n              }) =>\n                this.props.children({\n                  errors,\n                  fields: (\n                    <React.Fragment>\n                      {fields.map(property =>\n                        getField({\n                          errors,\n                          property,\n                          touched,\n                          value: (values || {})[property.name],\n                        })\n                      )}\n                    </React.Fragment>\n                  ),\n                  handleSubmit,\n                  isSubmitting,\n                  isValid,\n                  isValidating,\n                  resetForm,\n                  submitForm,\n                  values,\n                })\n              }\n            </Formik>\n          )}\n        </FormBuilder>\n      </React.Fragment>\n    );\n  }\n}\n"],"names":["getValidationState","field","form","touched","name","errors","const","FormInputComponent","props","React","FormGroup","controlId","validationState","ControlLabel","property","displayName","FormControl","disabled","isSubmitting","placeholder","type","onChange","HelpBlock","description","FormSelectComponent","componentClass","enum","map","opt","key","value","label","FormTextAreaComponent","FormCheckboxComponent","Checkbox","id","checked","FormHiddenComponent","className","FormBuilder","constructor","this","massageType","componentTypemaps","checkbox","hidden","select","textarea","validate","required","i18nRequiredProperty","undefined","Field","component","render","fields","enrichAndOrderProperties","definition","massagedValue","sanitizeValues","initialValue","children","getField","onSave","Object","keys","reduce","result","prop","massageValue","defaultValue","massageRequired","sort","a","b","aOrder","order","bOrder","length","secret","parseInt","String","toLocaleLowerCase","AutoForm","Formik","initialValues","onSubmit","values","isValid","isValidating","resetForm","submitForm","handleSubmit"],"mappings":"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"}