{"code":"import * as React from 'react';\r\nimport { ServerEventsContext } from './ServerEventsContext';\r\nimport { SyndesisFetch } from './SyndesisFetch';\r\nimport { WithChangeListener } from './WithChangeListener';\r\nimport { WithIntegrations } from './WithIntegrations';\r\nexport class WithMonitoredIntegrations extends React.Component {\r\n    changeFilter(change) {\r\n        return (change.kind === 'integration-deployment' ||\r\n            change.kind === 'integration-deployment-state-details');\r\n    }\r\n    getMonitoredIntegrations(integrations, response) {\r\n        return {\r\n            items: integrations.items.map((i) => ({\r\n                integration: i,\r\n                monitoring: response.data.find((o) => o.integrationId === i.id),\r\n            })),\r\n            totalCount: integrations.totalCount,\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(WithIntegrations, { disableUpdates: this.props.disableUpdates }, ({ data: integrations, ...props }) => (React.createElement(SyndesisFetch, { url: '/monitoring/integrations', defaultValue: [] }, ({ read, response }) => {\r\n            if (this.props.disableUpdates) {\r\n                const data = this.getMonitoredIntegrations(integrations, response);\r\n                return this.props.children({ ...props, data });\r\n            }\r\n            return (React.createElement(ServerEventsContext.Consumer, null, ({ registerChangeListener, unregisterChangeListener }) => (React.createElement(WithChangeListener, { read: read, registerChangeListener: registerChangeListener, unregisterChangeListener: unregisterChangeListener, filter: this.changeFilter }, () => {\r\n                const data = this.getMonitoredIntegrations(integrations, response);\r\n                return this.props.children({ ...props, data });\r\n            }))));\r\n        }))));\r\n    }\r\n}\r\n//# sourceMappingURL=WithMonitoredIntegrations.js.map","map":"{\"version\":3,\"file\":\"WithMonitoredIntegrations.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/WithMonitoredIntegrations.tsx\"],\"names\":[],\"mappings\":\"AAKA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAyB,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAa7E,MAAM,OAAO,yBAA0B,SAAQ,KAAK,CAAC,SAEpD;IACQ,YAAY,CAAC,MAAoB;QACtC,OAAO,CACL,MAAM,CAAC,IAAI,KAAK,wBAAwB;YACxC,MAAM,CAAC,IAAI,KAAK,sCAAsC,CACvD,CAAC;IACJ,CAAC;IACM,wBAAwB,CAC7B,YAAmC,EACnC,QAA8C;QAE9C,OAAO;YACL,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,GAAG,CAC3B,CAAC,CAAc,EAA6B,EAAE,CAAC,CAAC;gBAC9C,WAAW,EAAE,CAAC;gBACd,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAC5B,CAAC,CAAwB,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE,CACvD;aACF,CAAC,CACH;YACD,UAAU,EAAE,YAAY,CAAC,UAAU;SACF,CAAC;IACtC,CAAC;IACM,MAAM;QACX,OAAO,CACL,oBAAC,gBAAgB,IAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,IACxD,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,CAAC,CACrC,oBAAC,aAAa,IACZ,GAAG,EAAE,0BAA0B,EAC/B,YAAY,EAAE,EAAE,IAEf,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE;YACtB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;gBAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CACxC,YAAY,EACZ,QAAQ,CACT,CAAC;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,GAAG,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aAChD;YACD,OAAO,CACL,oBAAC,mBAAmB,CAAC,QAAQ,QAC1B,CAAC,EAAE,sBAAsB,EAAE,wBAAwB,EAAE,EAAE,EAAE,CAAC,CACzD,oBAAC,kBAAkB,IACjB,IAAI,EAAE,IAAI,EACV,sBAAsB,EAAE,sBAAsB,EAC9C,wBAAwB,EAAE,wBAAwB,EAClD,MAAM,EAAE,IAAI,CAAC,YAAY,IAExB,GAAG,EAAE;gBACJ,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CACxC,YAAY,EACZ,QAAQ,CACT,CAAC;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,GAAG,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YACjD,CAAC,CACkB,CACtB,CAC4B,CAChC,CAAC;QACJ,CAAC,CACa,CACjB,CACgB,CACpB,CAAC;IACJ,CAAC;CACF\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/api/api/src/WithMonitoredIntegrations.d.ts","writeByteOrderMark":false,"text":"import { IntegrationMonitoring, IntegrationWithMonitoring } from '@syndesis/models';\r\nimport * as React from 'react';\r\nimport { IFetchState } from './Fetch';\r\nimport { IIntegrationsResponse } from './WithIntegrations';\r\nimport { IChangeEvent } from './WithServerEvents';\r\nexport interface IMonitoredIntegrationsResponse {\r\n    items: IntegrationWithMonitoring[];\r\n    totalCount: number;\r\n}\r\nexport interface IWithMonitoredIntegrationsProps {\r\n    disableUpdates?: boolean;\r\n    children(props: IFetchState<IMonitoredIntegrationsResponse>): any;\r\n}\r\nexport declare class WithMonitoredIntegrations extends React.Component<IWithMonitoredIntegrationsProps> {\r\n    changeFilter(change: IChangeEvent): boolean;\r\n    getMonitoredIntegrations(integrations: IIntegrationsResponse, response: IFetchState<IntegrationMonitoring[]>): IMonitoredIntegrationsResponse;\r\n    render(): JSX.Element;\r\n}\r\n"}}
