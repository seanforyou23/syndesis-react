{"code":"import deepmerge from 'deepmerge';\r\nimport * as React from 'react';\r\nimport equal from 'react-fast-compare';\r\nimport { callFetch } from './callFetch';\r\nexport class Fetch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.read = this.read.bind(this);\r\n        this.state = {\r\n            data: this.props.initialValue || this.props.defaultValue,\r\n            error: false,\r\n            hasData: !!this.props.initialValue,\r\n            loading: true,\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        this.read();\r\n    }\r\n    async componentDidUpdate(prevProps) {\r\n        if (prevProps.url !== this.props.url) {\r\n            this.read();\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return !equal(this.props, nextProps) || !equal(this.state, nextState);\r\n    }\r\n    render() {\r\n        return this.props.children({\r\n            read: this.read,\r\n            response: this.state,\r\n        });\r\n    }\r\n    async read() {\r\n        try {\r\n            this.setState({ loading: true });\r\n            const response = await callFetch({\r\n                contentType: this.props.contentType,\r\n                headers: this.props.headers,\r\n                method: 'GET',\r\n                url: `${this.props.baseUrl}${this.props.url}`,\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText);\r\n            }\r\n            let data;\r\n            if (!this.props.contentType ||\r\n                this.props.contentType.indexOf('application/json') === 0) {\r\n                data = await response.json();\r\n                if (this.props.defaultValue) {\r\n                    data = deepmerge(this.props.defaultValue, data);\r\n                }\r\n            }\r\n            else {\r\n                data = await response.text();\r\n            }\r\n            this.setState({ data, hasData: true, loading: false });\r\n        }\r\n        catch (e) {\r\n            this.setState({\r\n                data: this.props.defaultValue,\r\n                error: true,\r\n                errorMessage: e.message,\r\n                hasData: false,\r\n                loading: false,\r\n            });\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Fetch.js.map","map":"{\"version\":3,\"file\":\"Fetch.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/Fetch.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/api/api/src/Fetch.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { IFetchHeaders } from './callFetch';\r\nexport interface IFetchState<T> {\r\n    data: T;\r\n    error: boolean;\r\n    errorMessage?: string;\r\n    hasData: boolean;\r\n    loading: boolean;\r\n}\r\nexport interface IFetchRenderProps<T> {\r\n    response: IFetchState<T>;\r\n    read(): Promise<void>;\r\n}\r\nexport interface IFetchProps<T> {\r\n    baseUrl: string;\r\n    url: string;\r\n    headers?: IFetchHeaders;\r\n    contentType?: string;\r\n    defaultValue: T;\r\n    initialValue?: T;\r\n    children(props: IFetchRenderProps<T>): any;\r\n}\r\nexport declare class Fetch<T> extends React.Component<IFetchProps<T>, IFetchState<T>> {\r\n    constructor(props: IFetchProps<T>);\r\n    componentDidMount(): Promise<void>;\r\n    componentDidUpdate(prevProps: IFetchProps<T>): Promise<void>;\r\n    shouldComponentUpdate(nextProps: IFetchProps<T>, nextState: IFetchState<T>): boolean;\r\n    render(): any;\r\n    read(): Promise<void>;\r\n}\r\n"}}
