{"code":"export function callFetch({ url, method, headers = {}, body, includeContentType = true, contentType = 'application/json; charset=utf-8', includeAccept = true, accept = 'application/json,text/plain,*/*', includeReferrerPolicy = true, }) {\r\n    if (includeAccept) {\r\n        const acceptId = 'Accept';\r\n        headers[acceptId] = accept;\r\n    }\r\n    if (includeContentType) {\r\n        const contentTypeId = 'Content-Type';\r\n        headers[contentTypeId] = contentType;\r\n    }\r\n    if (includeReferrerPolicy) {\r\n        const referrerPolicyId = 'referrerPolicy';\r\n        headers[referrerPolicyId] = 'no-referrer';\r\n    }\r\n    return fetch(url, {\r\n        body: contentType.includes('application/json')\r\n            ? JSON.stringify(body)\r\n            : body,\r\n        cache: 'no-cache',\r\n        credentials: 'include',\r\n        headers: {\r\n            ...headers,\r\n        },\r\n        method,\r\n        mode: 'cors',\r\n        redirect: 'follow',\r\n    });\r\n}\r\n//# sourceMappingURL=callFetch.js.map","map":"{\"version\":3,\"file\":\"callFetch.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/callFetch.ts\"],\"names\":[],\"mappings\":\"AAqCA,MAAM,UAAU,SAAS,CAAC,EACxB,GAAG,EACH,MAAM,EACN,OAAO,GAAG,EAAE,EACZ,IAAI,EACJ,kBAAkB,GAAG,IAAI,EACzB,WAAW,GAAG,iCAAiC,EAC/C,aAAa,GAAG,IAAI,EACpB,MAAM,GAAG,iCAAiC,EAC1C,qBAAqB,GAAG,IAAI,GACrB;IACP,IAAI,aAAa,EAAE;QACjB,MAAM,QAAQ,GAAG,QAAQ,CAAC;QAC1B,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;KAC5B;IAED,IAAI,kBAAkB,EAAE;QACtB,MAAM,aAAa,GAAG,cAAc,CAAC;QACrC,OAAO,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC;KACtC;IAED,IAAI,qBAAqB,EAAE;QACzB,MAAM,gBAAgB,GAAG,gBAAgB,CAAC;QAC1C,OAAO,CAAC,gBAAgB,CAAC,GAAG,aAAa,CAAC;KAC3C;IAED,OAAO,KAAK,CAAC,GAAG,EAAE;QAChB,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC;YAC5C,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YACtB,CAAC,CAAC,IAAI;QACR,KAAK,EAAE,UAAU;QACjB,WAAW,EAAE,SAAS;QACtB,OAAO,EAAE;YACP,GAAG,OAAO;SACX;QACD,MAAM;QACN,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,QAAQ;KACnB,CAAC,CAAC;AACL,CAAC\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/api/api/src/callFetch.d.ts","writeByteOrderMark":false,"text":"export interface IFetchHeaders {\r\n    [s: string]: string;\r\n}\r\nexport interface IFetch {\r\n    url: string;\r\n    method: 'GET' | 'PUT' | 'POST' | 'DELETE';\r\n    headers?: IFetchHeaders;\r\n    body?: any;\r\n    /**\r\n     * Indicates if the content type should be included in the headers. Defaults to `true`. When using a\r\n     * content type of 'multipart/form-data' this should be set to `false` but you still need to set the\r\n     * content type.\r\n     */\r\n    includeContentType?: boolean;\r\n    /**\r\n     * Defaults to 'application/json; charset=utf-8' if not set.\r\n     */\r\n    contentType?: string;\r\n    /**\r\n     * Indicates if 'accept' should be included in the headers. Defaults to `true`.\r\n     */\r\n    includeAccept?: boolean;\r\n    /**\r\n     * Defaults to 'application/json,text/plain,*&#47*' if not set.\r\n     */\r\n    accept?: string;\r\n    /**\r\n     * Indicates if a 'Referer Policy' of 'no-referrer' should be included.\r\n     */\r\n    includeReferrerPolicy?: boolean;\r\n}\r\nexport declare function callFetch({ url, method, headers, body, includeContentType, contentType, includeAccept, accept, includeReferrerPolicy, }: IFetch): Promise<Response>;\r\n"}}
