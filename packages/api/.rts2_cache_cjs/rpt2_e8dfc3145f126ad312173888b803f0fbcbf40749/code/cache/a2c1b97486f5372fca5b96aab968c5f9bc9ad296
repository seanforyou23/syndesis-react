{"code":"import * as React from 'react';\r\nimport { ApiContext } from './ApiContext';\r\nimport { callFetch } from './callFetch';\r\nconst WORKSPACE_ROOT = '/tko:komodo/tko:workspace/';\r\nexport class WithVirtualizationHelpersWrapped extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createVirtualization = this.createVirtualization.bind(this);\r\n        this.deleteVirtualization = this.deleteVirtualization.bind(this);\r\n        this.publishVirtualization = this.publishVirtualization.bind(this);\r\n        this.unpublishServiceVdb = this.unpublishServiceVdb.bind(this);\r\n    }\r\n    /**\r\n     * Creates a virtualization with the specified name and description\r\n     * @param virtName the name of the virtualization to create\r\n     * @param virtDesc the description (optional) of the virtualization to create\r\n     */\r\n    async createVirtualization(virtName, virtDesc) {\r\n        const newVirtualization = {\r\n            keng__dataPath: `${WORKSPACE_ROOT}${this.props.username}/${virtName}`,\r\n            keng__id: `${virtName}`,\r\n            tko__description: virtDesc ? `${virtDesc}` : '',\r\n        };\r\n        const response = await callFetch({\r\n            body: newVirtualization,\r\n            headers: {},\r\n            method: 'POST',\r\n            url: `${this.props.dvApiUri}workspace/dataservices/${virtName}`,\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Deletes the virtualization with the specified name.\r\n     * @param virtualizationName the name of the virtualization being deleted\r\n     */\r\n    async deleteVirtualization(virtualizationName) {\r\n        const response = await callFetch({\r\n            headers: {},\r\n            method: 'DELETE',\r\n            url: `${this.props.dvApiUri}workspace/dataservices/${virtualizationName}`,\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Publish the virtualization with the specified name.\r\n     * @param virtualizationName the name of the virtualization being published\r\n     */\r\n    async publishVirtualization(virtualizationName) {\r\n        const pubVirtualization = {\r\n            name: `${virtualizationName}`,\r\n        };\r\n        const response = await callFetch({\r\n            body: pubVirtualization,\r\n            headers: {},\r\n            method: 'POST',\r\n            url: `${this.props.dvApiUri}metadata/publish`,\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Unpublish the Service VDB with the specified name.\r\n     * @param vdbName the name of the vdb associated with the service\r\n     */\r\n    async unpublishServiceVdb(vdbName) {\r\n        const response = await callFetch({\r\n            headers: {},\r\n            method: 'DELETE',\r\n            url: `${this.props.dvApiUri}metadata/publish/${vdbName}`,\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    render() {\r\n        return this.props.children({\r\n            createVirtualization: this.createVirtualization,\r\n            deleteVirtualization: this.deleteVirtualization,\r\n            publishVirtualization: this.publishVirtualization,\r\n            unpublishServiceVdb: this.unpublishServiceVdb,\r\n        });\r\n    }\r\n}\r\nexport const WithVirtualizationHelpers = props => (React.createElement(ApiContext.Consumer, null, apiContext => (React.createElement(WithVirtualizationHelpersWrapped, Object.assign({}, props, apiContext)))));\r\n//# sourceMappingURL=WithVirtualizationHelpers.js.map","map":"{\"version\":3,\"file\":\"WithVirtualizationHelpers.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/WithVirtualizationHelpers.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/api/api/src/WithVirtualizationHelpers.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { IApiContext } from './ApiContext';\r\nexport interface IWithVirtualizationHelpersChildrenProps {\r\n    createVirtualization(virtualizationName: string, virtualizationDescription?: string): Promise<void>;\r\n    deleteVirtualization(virtualizationName: string): Promise<void>;\r\n    publishVirtualization(virtualizationName: string): Promise<void>;\r\n    unpublishServiceVdb(vdbName: string): Promise<void>;\r\n}\r\nexport interface IWithVirtualizationHelpersProps {\r\n    username: string;\r\n    children(props: IWithVirtualizationHelpersChildrenProps): any;\r\n}\r\nexport declare class WithVirtualizationHelpersWrapped extends React.Component<IWithVirtualizationHelpersProps & IApiContext> {\r\n    constructor(props: IWithVirtualizationHelpersProps & IApiContext);\r\n    /**\r\n     * Creates a virtualization with the specified name and description\r\n     * @param virtName the name of the virtualization to create\r\n     * @param virtDesc the description (optional) of the virtualization to create\r\n     */\r\n    createVirtualization(virtName: string, virtDesc?: string): Promise<void>;\r\n    /**\r\n     * Deletes the virtualization with the specified name.\r\n     * @param virtualizationName the name of the virtualization being deleted\r\n     */\r\n    deleteVirtualization(virtualizationName: string): Promise<void>;\r\n    /**\r\n     * Publish the virtualization with the specified name.\r\n     * @param virtualizationName the name of the virtualization being published\r\n     */\r\n    publishVirtualization(virtualizationName: string): Promise<void>;\r\n    /**\r\n     * Unpublish the Service VDB with the specified name.\r\n     * @param vdbName the name of the vdb associated with the service\r\n     */\r\n    unpublishServiceVdb(vdbName: string): Promise<void>;\r\n    render(): any;\r\n}\r\nexport declare const WithVirtualizationHelpers: React.FunctionComponent<IWithVirtualizationHelpersProps>;\r\n"}}
