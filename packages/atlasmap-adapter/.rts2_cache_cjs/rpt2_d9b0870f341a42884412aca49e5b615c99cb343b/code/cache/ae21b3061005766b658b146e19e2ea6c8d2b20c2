{"code":"import * as React from 'react';\r\nimport equal from 'react-fast-compare';\r\n/* tslint:disable */\r\nconst runtime = require('file-loader?name=atlasmap-runtime.js!@syndesis/atlasmap-assembly/dist/atlasmap/runtime.js');\r\nconst polyfills = require('file-loader?name=atlasmap-polyfills.js!@syndesis/atlasmap-assembly/dist/atlasmap/polyfills.js');\r\nconst styles = require('file-loader?name=atlasmap-styles.js!@syndesis/atlasmap-assembly/dist/atlasmap/styles.js');\r\nconst scripts = require('file-loader?name=atlasmap-scripts.js!@syndesis/atlasmap-assembly/dist/atlasmap/scripts.js');\r\nconst vendor = require('file-loader?name=atlasmap-vendor.js!@syndesis/atlasmap-assembly/dist/atlasmap/vendor.js');\r\nconst main = require('file-loader?name=atlasmap-main.js!@syndesis/atlasmap-assembly/dist/atlasmap/main.js');\r\n/* tslint:enable*/\r\nexport var DocumentType;\r\n(function (DocumentType) {\r\n    DocumentType[\"JAVA\"] = \"Java\";\r\n    DocumentType[\"XML\"] = \"XML\";\r\n    DocumentType[\"XSD\"] = \"XSD\";\r\n    DocumentType[\"JSON\"] = \"JSON\";\r\n    DocumentType[\"CORE\"] = \"Core\";\r\n    DocumentType[\"CSV\"] = \"CSV\";\r\n    DocumentType[\"CONSTANT\"] = \"Constants\";\r\n    DocumentType[\"PROPERTY\"] = \"Property\";\r\n})(DocumentType || (DocumentType = {}));\r\nexport var InspectionType;\r\n(function (InspectionType) {\r\n    InspectionType[\"JAVA_CLASS\"] = \"JAVA_CLASS\";\r\n    InspectionType[\"SCHEMA\"] = \"SCHEMA\";\r\n    InspectionType[\"INSTANCE\"] = \"INSTANCE\";\r\n    InspectionType[\"UNKNOWN\"] = \"UNKNOWN\";\r\n})(InspectionType || (InspectionType = {}));\r\nexport class DataMapperAdapter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.iframe = null;\r\n        this.messageChannel = new MessageChannel();\r\n        this.onIframeLoad = this.onIframeLoad.bind(this);\r\n        this.onMessages = this.onMessages.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        if (this.iframe) {\r\n            this.iframe.addEventListener('load', this.onIframeLoad);\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        const { onMappings: _, ...prevPayload } = this.props;\r\n        const { onMappings: __, ...nextPayload } = nextProps;\r\n        if (!equal(prevPayload, nextPayload)) {\r\n            this.updateDataMapperApp(nextPayload);\r\n        }\r\n    }\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.iframe) {\r\n            this.iframe.removeEventListener('load', this.onIframeLoad);\r\n        }\r\n    }\r\n    onIframeLoad() {\r\n        this.messagePort = this.messageChannel.port1;\r\n        this.messagePort.onmessage = this.onMessages;\r\n        this.iframe.contentWindow.postMessage('init', '*', [\r\n            this.messageChannel.port2,\r\n        ]);\r\n    }\r\n    onMessages(event) {\r\n        switch (event.data.message) {\r\n            case 'ready': {\r\n                const { onMappings, ...payload } = this.props;\r\n                this.updateDataMapperApp(payload);\r\n                break;\r\n            }\r\n            case 'mappings': {\r\n                const payload = event.data.payload;\r\n                this.props.onMappings(payload.mappings);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    updateDataMapperApp(props) {\r\n        if (this.messagePort) {\r\n            const message = {\r\n                message: 'update',\r\n                payload: {\r\n                    documentId: props.documentId,\r\n                    inputDataShape: props.inputDataShape,\r\n                    inputDescription: props.inputDescription,\r\n                    inputDocumentType: props.inputDocumentType,\r\n                    inputInspectionType: props.inputInspectionType,\r\n                    inputName: props.inputName,\r\n                    mappings: props.mappings,\r\n                    outputDataShape: props.outputDataShape,\r\n                    outputDescription: props.outputDescription,\r\n                    outputDocumentType: props.outputDocumentType,\r\n                    outputInspectionType: props.outputInspectionType,\r\n                    outputName: props.outputName,\r\n                },\r\n            };\r\n            this.messagePort.postMessage(message);\r\n        }\r\n    }\r\n    render() {\r\n        const srcDoc = `<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Atlasmap</title>\n  <base href=\"/dm\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body style=\"background: transparent;\">\n  <app-root></app-root>\n  <script type=\"text/javascript\" src=\"${runtime}\"></script>\n  <script type=\"text/javascript\" src=\"${polyfills}\"></script>\n  <script type=\"text/javascript\" src=\"${styles}\"></script>\n  <script type=\"text/javascript\" src=\"${scripts}\"></script>\n  <script type=\"text/javascript\" src=\"${vendor}\"></script>\n  <script type=\"text/javascript\" src=\"${main}\"></script></body>\n</html>\n\n`;\r\n        // bypass some odd typing incompatibility with base React when using \"exotic\"\r\n        // html attributes\r\n        const extraProps = {\r\n            allowtransparency: '',\r\n        };\r\n        return (React.createElement(\"iframe\", Object.assign({ srcDoc: srcDoc, style: { width: '100%', height: '100%' }, frameBorder: 0 }, extraProps, { ref: el => (this.iframe = el) })));\r\n    }\r\n}\r\n//# sourceMappingURL=DataMapperAdapter.js.map","map":"{\"version\":3,\"file\":\"DataMapperAdapter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/DataMapperAdapter.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/atlasmap-adapter/atlasmap-adapter/src/DataMapperAdapter.d.ts","writeByteOrderMark":false,"text":"import { IInitMessagePayload } from '@syndesis/atlasmap-assembly/src/app/app.component';\r\nimport * as React from 'react';\r\nexport declare enum DocumentType {\r\n    JAVA = \"Java\",\r\n    XML = \"XML\",\r\n    XSD = \"XSD\",\r\n    JSON = \"JSON\",\r\n    CORE = \"Core\",\r\n    CSV = \"CSV\",\r\n    CONSTANT = \"Constants\",\r\n    PROPERTY = \"Property\"\r\n}\r\nexport declare enum InspectionType {\r\n    JAVA_CLASS = \"JAVA_CLASS\",\r\n    SCHEMA = \"SCHEMA\",\r\n    INSTANCE = \"INSTANCE\",\r\n    UNKNOWN = \"UNKNOWN\"\r\n}\r\nexport interface IDataMapperAdapterProps extends IInitMessagePayload {\r\n    onMappings(mappings: string): void;\r\n}\r\nexport declare class DataMapperAdapter extends React.Component<IDataMapperAdapterProps> {\r\n    protected messageChannel: MessageChannel;\r\n    protected messagePort?: MessagePort;\r\n    protected iframe: HTMLIFrameElement | null;\r\n    constructor(props: IDataMapperAdapterProps);\r\n    componentDidMount(): void;\r\n    componentWillReceiveProps(nextProps: IDataMapperAdapterProps): void;\r\n    shouldComponentUpdate(): boolean;\r\n    componentWillUnmount(): void;\r\n    onIframeLoad(): void;\r\n    onMessages(event: MessageEvent): void;\r\n    updateDataMapperApp(props: IInitMessagePayload): void;\r\n    render(): JSX.Element;\r\n}\r\n"}}
