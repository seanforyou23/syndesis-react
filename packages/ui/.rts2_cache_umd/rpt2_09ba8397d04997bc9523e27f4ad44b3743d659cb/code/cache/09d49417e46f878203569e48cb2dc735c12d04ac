{"code":"import { Alert, Card } from 'patternfly-react';\r\nimport * as React from 'react';\r\nimport { DndFileChooser } from '../Shared/DndFileChooser';\r\nexport class ExtensionImportCard extends React.Component {\r\n    render() {\r\n        return (React.createElement(Card, null,\r\n            React.createElement(Card.Heading, null,\r\n                React.createElement(Card.Title, null, this.props.i18nTitle)),\r\n            React.createElement(Card.Body, null,\r\n                React.createElement(\"p\", null, this.props.i18nImportInstructions),\r\n                this.props.i18nAlertMessage ? (React.createElement(Alert, { type: 'error' },\r\n                    React.createElement(\"span\", null, this.props.i18nAlertMessage))) : null,\r\n                React.createElement(DndFileChooser, { disableDropzone: this.props.dndDisabled, fileExtensions: '.jar', i18nHelpMessage: this.props.i18nDndHelpMessage, i18nInstructions: this.props.i18nDndInstructions, i18nNoFileSelectedMessage: this.props.i18nDndNoFileSelectedMessage, i18nSelectedFileLabel: this.props.i18nDndSelectedFileLabel, i18nUploadFailedMessage: this.props.i18nDndUploadFailedMessage, i18nUploadSuccessMessage: this.props.i18nDndUploadSuccessMessage, onUploadAccepted: this.props.onDndUploadAccepted, onUploadRejected: this.props.onDndUploadRejected }))));\r\n    }\r\n}\r\n//# sourceMappingURL=ExtensionImportCard.js.map","map":"{\"version\":3,\"file\":\"ExtensionImportCard.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Customization/ExtensionImportCard.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAsE1D,MAAM,OAAO,mBAAoB,SAAQ,KAAK,CAAC,SAE9C;IACQ,MAAM;QACX,OAAO,CACL,oBAAC,IAAI;YACH,oBAAC,IAAI,CAAC,OAAO;gBACX,oBAAC,IAAI,CAAC,KAAK,QAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAc,CAClC;YACf,oBAAC,IAAI,CAAC,IAAI;gBACR,+BAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAK;gBACzC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAC7B,oBAAC,KAAK,IAAC,IAAI,EAAE,OAAO;oBAClB,kCAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAQ,CACpC,CACT,CAAC,CAAC,CAAC,IAAI;gBACR,oBAAC,cAAc,IACb,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EACvC,cAAc,EAAE,MAAM,EACtB,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAC9C,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAChD,yBAAyB,EAAE,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAClE,qBAAqB,EAAE,IAAI,CAAC,KAAK,CAAC,wBAAwB,EAC1D,uBAAuB,EAAE,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAC9D,wBAAwB,EAAE,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAChE,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAChD,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAChD,CACQ,CACP,CACR,CAAC;IACJ,CAAC;CACF\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/ui/ui/src/Customization/ExtensionImportCard.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nexport interface IExtensionImportCardProps {\r\n    /**\r\n     * `true` if the dropzone should be disabled.\r\n     */\r\n    dndDisabled: boolean;\r\n    /**\r\n     * A localized alert message when a jar file cannot be processed as an extension.\r\n     */\r\n    i18nAlertMessage?: string;\r\n    /**\r\n     * The localized text that appears below the selected file information at the bottom of the drop area. This\r\n     * message should identify the accepted file extension.\r\n     */\r\n    i18nDndHelpMessage: string;\r\n    /**\r\n     * The localized text (may include HTML tags) that appears above the selected file information at the\r\n     * top of the drop area. This message should describe how the DnD works.\r\n     */\r\n    i18nDndInstructions: string;\r\n    /**\r\n     * The localized text that appears when no file has been selected.\r\n     */\r\n    i18nDndNoFileSelectedMessage: string;\r\n    /**\r\n     * The localized text for the label that appears before the selected file information.\r\n     */\r\n    i18nDndSelectedFileLabel: string;\r\n    /**\r\n     * A general, localized message for when a file upload failed. This message will be shown\r\n     * along with an error icon and appears next to the selected file message. If this property\r\n     * is set then `i18nDndUploadSuccessMessage` should not be set.\r\n     */\r\n    i18nDndUploadFailedMessage?: string;\r\n    /**\r\n     * A general, localized message for when a file upload was successful. This message will be shown\r\n     * along with an OK icon and appear next to the selected file message. If this property\r\n     * is set then `i18nDndUploadFailedMessage` should not be set.\r\n     */\r\n    i18nDndUploadSuccessMessage?: string;\r\n    /**\r\n     * The localized instructions text that appears above the DnD component.\r\n     */\r\n    i18nImportInstructions: string;\r\n    /**\r\n     * The localized title text that appears above the DnD component.\r\n     */\r\n    i18nTitle: string;\r\n    /**\r\n     * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\r\n     */\r\n    onDndUploadAccepted(files: File[]): void;\r\n    /**\r\n     * The localized text (may include HTML tags) that appears when the file upload fails.\r\n     */\r\n    onDndUploadRejected(fileName: string): string;\r\n}\r\nexport declare class ExtensionImportCard extends React.Component<IExtensionImportCardProps> {\r\n    render(): JSX.Element;\r\n}\r\n"}}
