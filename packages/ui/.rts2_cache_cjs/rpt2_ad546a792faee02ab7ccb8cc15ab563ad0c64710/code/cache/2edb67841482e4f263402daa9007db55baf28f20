{"code":"import { Grid, Icon, TimedToastNotification, ToastNotificationList, } from 'patternfly-react';\r\nimport * as React from 'react';\r\nimport Dropzone from 'react-dropzone';\r\nimport { Container } from '../Layout/Container';\r\nimport './DndFileChooser.css';\r\n/**\r\n * A component that can be used to upload files. Files can be uploaded by clicking in the drop zone or by\r\n * drag and dropping files into the drop zone.\r\n */\r\nexport class DndFileChooser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // set up initial state\r\n        this.state = {\r\n            files: [],\r\n            notifications: [],\r\n        };\r\n        this.handleAcceptedFiles = this.handleAcceptedFiles.bind(this);\r\n        this.handleRejectedFiles = this.handleRejectedFiles.bind(this);\r\n    }\r\n    /**\r\n     * Obtains an element that lists the names of the files that have been uploaded.\r\n     */\r\n    getSelectedFileMessage() {\r\n        // one file uploaded\r\n        if (this.state.files.length === 1) {\r\n            return React.createElement(Container, null, this.state.files[0].name);\r\n        }\r\n        // multiple files uploaded\r\n        if (this.state.files.length > 1) {\r\n            return (React.createElement(\"ul\", null, this.state.files.map((file, index) => (React.createElement(\"li\", { key: index }, file.name)))));\r\n        }\r\n        // no files uploaded\r\n        return React.createElement(Container, null, this.props.i18nNoFileSelectedMessage);\r\n    }\r\n    /**\r\n     * Obtains an element that indicates the if the upload was successful.\r\n     */\r\n    getUploadMessage() {\r\n        if (this.props.i18nUploadSuccessMessage) {\r\n            return (React.createElement(\"span\", { className: \"dnd-file-chooser__uploadMessage\" },\r\n                React.createElement(Icon, { type: \"pf\", name: \"ok\" }),\r\n                \"\\u00A0\",\r\n                this.props.i18nUploadSuccessMessage));\r\n        }\r\n        if (this.props.i18nUploadFailedMessage) {\r\n            return (React.createElement(\"span\", { className: \"dnd-file-chooser__uploadMessage\" },\r\n                React.createElement(Icon, { type: \"pf\", name: \"error-circle-o\" }),\r\n                \"\\u00A0\",\r\n                this.props.i18nUploadFailedMessage));\r\n        }\r\n        // no message\r\n        return React.createElement(Container, null);\r\n    }\r\n    /**\r\n     * Callback for when one or more files were uploaded successfully.\r\n     * @param acceptedFiles the files that have been uploaded\r\n     */\r\n    handleAcceptedFiles(acceptedFiles) {\r\n        this.setState({ ...this.state, files: acceptedFiles });\r\n        this.props.onUploadAccepted(acceptedFiles); // notify callback\r\n    }\r\n    /**\r\n     * Callback for when one or more files were rejected.\r\n     * @param rejectedFiles the files that were rejected\r\n     */\r\n    handleRejectedFiles(rejectedFiles) {\r\n        const notifications = rejectedFiles.map(file => ({\r\n            key: file.name,\r\n            message: this.props.onUploadRejected(file.name),\r\n        }));\r\n        // If single file dropped then all files will be cleared. If multiple allowed, and multiple dropped,\r\n        // and some are accepted and some are rejected, the accepted files will still be uploaded because the\r\n        // handleAcceptedFiles is called after this method.\r\n        this.setState({\r\n            ...this.state,\r\n            files: [],\r\n            notifications: [...this.state.notifications, ...notifications],\r\n        });\r\n    }\r\n    /**\r\n     * Removes the specified notification from the list of notifications that have yet to be displayed.\r\n     * @param notificationToRemove the notificiation being removed\r\n     */\r\n    removeNotificationAction(notificationToRemove) {\r\n        const notifications = this.state.notifications.filter(notification => notificationToRemove.key !== notification.key);\r\n        this.setState({\r\n            ...this.state,\r\n            notifications,\r\n        });\r\n    }\r\n    render() {\r\n        return (React.createElement(Dropzone, { accept: this.props.fileExtensions, disabled: this.props.disableDropzone, multiple: this.props.allowMultiple, onDropAccepted: this.handleAcceptedFiles, onDropRejected: this.handleRejectedFiles }, ({ getRootProps, getInputProps }) => (React.createElement(Container, null,\r\n            React.createElement(ToastNotificationList, { className: \"dnd-file-chooser__notificationList\" }, this.state.notifications.map(notification => (React.createElement(TimedToastNotification, { key: notification.key, type: 'error', persistent: false, onDismiss: this.removeNotificationAction.bind(this, notification), timerdelay: this.props.notificationTimerDelay },\r\n                React.createElement(Container, { dangerouslySetInnerHTML: {\r\n                        __html: notification.message,\r\n                    } }))))),\r\n            React.createElement(Grid, Object.assign({ disabled: this.props.disableDropzone, fluid: true, className: \"dnd-file-chooser\" }, getRootProps({ refKey: 'dnd-file-chooser' })),\r\n                React.createElement(Grid.Row, null,\r\n                    React.createElement(Grid.Col, { className: \"dnd-file-chooser__instructions\", dangerouslySetInnerHTML: {\r\n                            __html: this.props.i18nInstructions,\r\n                        } })),\r\n                React.createElement(Grid.Row, null,\r\n                    React.createElement(Grid.Col, null,\r\n                        React.createElement(\"input\", Object.assign({}, getInputProps())))),\r\n                React.createElement(Grid.Row, null,\r\n                    React.createElement(Grid.Col, { className: \"dnd-file-chooser__selectedFileLabel\", xs: 3 }, this.props.i18nSelectedFileLabel),\r\n                    React.createElement(Grid.Col, { className: \"dnd-file-chooser__selectedFile\", xs: 6 }, this.getSelectedFileMessage()),\r\n                    React.createElement(Grid.Col, { xs: 3 }, this.getUploadMessage())),\r\n                this.props.i18nHelpMessage ? (React.createElement(Grid.Row, null,\r\n                    React.createElement(Grid.Col, { className: \"dnd-file-chooser__helpText\" }, this.props.i18nHelpMessage))) : null)))));\r\n    }\r\n}\r\n// setup default prop values\r\nDndFileChooser.defaultProps = {\r\n    allowMultiple: false,\r\n    notificationTimerDelay: 4000,\r\n};\r\n//# sourceMappingURL=DndFileChooser.js.map","map":"{\"version\":3,\"file\":\"DndFileChooser.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Shared/DndFileChooser.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/ui/ui/src/Shared/DndFileChooser.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport './DndFileChooser.css';\r\n/**\r\n * The properties of the `DndFileChooser`.\r\n */\r\nexport interface IDndFileChooserProps {\r\n    /**\r\n     * Indicates if multiple files can be added. Defaults to `false`.\r\n     */\r\n    allowMultiple?: boolean;\r\n    /**\r\n     * `true` if the dropzone should be disabled. Defaults to `false`.\r\n     */\r\n    disableDropzone: boolean;\r\n    /**\r\n     * A comma delimited string of file extensions. For example, '.jar,.txt'. Defaults to any file extension.\r\n     */\r\n    fileExtensions?: string;\r\n    /**\r\n     * The localized text that appears below the selected file information at the bottom of the drop area.\r\n     */\r\n    i18nHelpMessage?: string;\r\n    /**\r\n     * The localized text (may include HTML tags) that appears above the selected file information at the\r\n     * top of the drop area.\r\n     */\r\n    i18nInstructions: string;\r\n    /**\r\n     * The localized text that appears when no file has been selected.\r\n     */\r\n    i18nNoFileSelectedMessage: string;\r\n    /**\r\n     * The localized text for the label that appears before the selected file information.\r\n     */\r\n    i18nSelectedFileLabel: string;\r\n    /**\r\n     * A general, localized message for when a file upload failed. This message will be shown\r\n     * along with an error icon and appears next to the selected file message. If this property\r\n     * is set then `i18nUploadSuccessMessage` should not be set.\r\n     */\r\n    i18nUploadFailedMessage?: string;\r\n    /**\r\n     * A general, localized message for when a file upload was successful. This message will be shown\r\n     * along with an OK icon and appear next to the selected file message. If this property\r\n     * is set then `i18nUploadFailedMessage` should not be set.\r\n     */\r\n    i18nUploadSuccessMessage?: string;\r\n    /**\r\n     * The number of milliseconds that toast notifications will be displayed. Defaults to `4000`.\r\n     */\r\n    notificationTimerDelay?: number;\r\n    /**\r\n     * Obtains the localized text (may include HTML tags) that appears when the file upload was rejected. This\r\n     * will occur when a DnD of a file with the wrong extension is dropped. This message is presented\r\n     * as a timed toast notification.\r\n     */\r\n    onUploadRejected(fileName: string): string;\r\n    /**\r\n     * Callback for when one or more file uploads have been accepted. Caller should handler processing of the files.\r\n     */\r\n    onUploadAccepted(file: File[]): void;\r\n}\r\n/**\r\n * A type used to identify files that were rejected. The key is the file name.\r\n */\r\ninterface INotificationType {\r\n    key: string;\r\n    message: string;\r\n}\r\n/**\r\n * The state properties of the `DndFileChooser`.\r\n */\r\nexport interface IDndFileChooserState {\r\n    /**\r\n     * The files that were uploaded successfully. Defaults to an empty array.\r\n     */\r\n    files: File[];\r\n    /**\r\n     * The error notifications for rejected files. After a toast is displayed for a notification it is removed\r\n     * from the array.\r\n     */\r\n    notifications: INotificationType[];\r\n}\r\n/**\r\n * A component that can be used to upload files. Files can be uploaded by clicking in the drop zone or by\r\n * drag and dropping files into the drop zone.\r\n */\r\nexport declare class DndFileChooser extends React.Component<IDndFileChooserProps, IDndFileChooserState> {\r\n    static defaultProps: {\r\n        allowMultiple: boolean;\r\n        notificationTimerDelay: number;\r\n    };\r\n    constructor(props: IDndFileChooserProps);\r\n    /**\r\n     * Obtains an element that lists the names of the files that have been uploaded.\r\n     */\r\n    getSelectedFileMessage(): JSX.Element;\r\n    /**\r\n     * Obtains an element that indicates the if the upload was successful.\r\n     */\r\n    getUploadMessage(): JSX.Element;\r\n    /**\r\n     * Callback for when one or more files were uploaded successfully.\r\n     * @param acceptedFiles the files that have been uploaded\r\n     */\r\n    handleAcceptedFiles(acceptedFiles: File[]): void;\r\n    /**\r\n     * Callback for when one or more files were rejected.\r\n     * @param rejectedFiles the files that were rejected\r\n     */\r\n    handleRejectedFiles(rejectedFiles: File[]): void;\r\n    /**\r\n     * Removes the specified notification from the list of notifications that have yet to be displayed.\r\n     * @param notificationToRemove the notificiation being removed\r\n     */\r\n    removeNotificationAction(notificationToRemove: INotificationType): void;\r\n    render(): JSX.Element;\r\n}\r\nexport {};\r\n"}}
