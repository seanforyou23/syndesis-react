{"code":"// tslint:disable react-unused-props-and-state\r\n// remove the above line after this goes GA https://github.com/Microsoft/tslint-microsoft-contrib/pull/824\r\nimport classnames from 'classnames';\r\nimport * as React from 'react';\r\nimport { ButtonLink, Loader } from '../Layout';\r\nimport './IntegrationEditorLayout.css';\r\n/**\r\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\r\n * component under the hood.\r\n * The footer is pre-defined and follows the PF Wizard pattern, with\r\n * Cancel/Previous/Next buttons.\r\n *\r\n * @todo in the CSS we use hardcoded values for the heights of various\r\n * elements of the page to be able to size the element to take all the available\r\n * height and show the right scrollbars.\r\n * We should really find a smarter way to handle this.\r\n */\r\nexport const IntegrationEditorLayout = ({ header, sidebar, content, onCancel, onBack, onNext, cancelHref, backHref, nextHref, isNextLoading, isNextDisabled, isLastStep = false, }) => {\r\n    return (React.createElement(\"div\", { className: classnames('wizard-pf-body integration-editor-layout', {\r\n            'has-footer': true,\r\n        }) },\r\n        header,\r\n        React.createElement(\"div\", { className: \"wizard-pf-row integration-editor-layout__body\" },\r\n            React.createElement(\"div\", { className: \"wizard-pf-sidebar\" }, sidebar),\r\n            React.createElement(\"div\", { className: 'wizard-pf-main cards-pf integration-editor-layout__contentWrapper' },\r\n                React.createElement(\"div\", { className: \"integration-editor-layout__content\" }, content))),\r\n        React.createElement(\"div\", { className: \"wizard-pf-footer integration-editor-layout__footer\" },\r\n            React.createElement(ButtonLink, { onClick: onBack, href: backHref, className: 'wizard-pf-back' },\r\n                React.createElement(\"i\", { className: \"fa fa-angle-left\" }),\r\n                \" Back\"),\r\n            React.createElement(ButtonLink, { onClick: onNext, href: nextHref, as: 'primary', className: 'wizard-pf-next', disabled: isNextLoading || isNextDisabled },\r\n                isNextLoading ? React.createElement(Loader, { size: 'xs', inline: true }) : null,\r\n                isLastStep ? ('Done') : (React.createElement(React.Fragment, null,\r\n                    \"Next \",\r\n                    React.createElement(\"i\", { className: \"fa fa-angle-right\" })))),\r\n            React.createElement(ButtonLink, { onClick: onCancel, href: cancelHref, className: 'wizard-pf-cancel' }, \"Cancel\"))));\r\n};\r\n//# sourceMappingURL=IntegrationEditorLayout.js.map","map":"{\"version\":3,\"file\":\"IntegrationEditorLayout.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Integration/IntegrationEditorLayout.tsx\"],\"names\":[],\"mappings\":\"AAAA,8CAA8C;AAC9C,0GAA0G;AAC1G,OAAO,UAAU,MAAM,YAAY,CAAC;AAEpC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAC/C,OAAO,+BAA+B,CAAC;AA0CvC;;;;;;;;;;GAUG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAEhC,CAAC,EACH,MAAM,EACN,OAAO,EACP,OAAO,EACP,QAAQ,EACR,MAAM,EACN,MAAM,EACN,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,aAAa,EACb,cAAc,EACd,UAAU,GAAG,KAAK,GACY,EAAE,EAAE;IAClC,OAAO,CACL,6BACE,SAAS,EAAE,UAAU,CAAC,0CAA0C,EAAE;YAChE,YAAY,EAAE,IAAI;SACnB,CAAC;QAED,MAAM;QACP,6BAAK,SAAS,EAAC,+CAA+C;YAC5D,6BAAK,SAAS,EAAC,mBAAmB,IAAE,OAAO,CAAO;YAClD,6BACE,SAAS,EACP,mEAAmE;gBAGrE,6BAAK,SAAS,EAAC,oCAAoC,IAAE,OAAO,CAAO,CAC/D,CACF;QACN,6BAAK,SAAS,EAAC,oDAAoD;YACjE,oBAAC,UAAU,IACT,OAAO,EAAE,MAAM,EACf,IAAI,EAAE,QAAQ,EACd,SAAS,EAAE,gBAAgB;gBAE3B,2BAAG,SAAS,EAAC,kBAAkB,GAAG;wBACvB;YACb,oBAAC,UAAU,IACT,OAAO,EAAE,MAAM,EACf,IAAI,EAAE,QAAQ,EACd,EAAE,EAAE,SAAS,EACb,SAAS,EAAE,gBAAgB,EAC3B,QAAQ,EAAE,aAAa,IAAI,cAAc;gBAExC,aAAa,CAAC,CAAC,CAAC,oBAAC,MAAM,IAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,GAAI,CAAC,CAAC,CAAC,IAAI;gBAC3D,UAAU,CAAC,CAAC,CAAC,CACZ,MAAM,CACP,CAAC,CAAC,CAAC,CACF;;oBACO,2BAAG,SAAS,EAAC,mBAAmB,GAAG,CACvC,CACJ,CACU;YACb,oBAAC,UAAU,IACT,OAAO,EAAE,QAAQ,EACjB,IAAI,EAAE,UAAU,EAChB,SAAS,EAAE,kBAAkB,aAGlB,CACT,CACF,CACP,CAAC;AACJ,CAAC,CAAC\"}","dts":{"name":"/Users/mspaxman/code/workingrepos/seanforyou23-syndesis-react-poc/packages/ui/ui/src/Integration/IntegrationEditorLayout.d.ts","writeByteOrderMark":false,"text":"import * as H from 'history';\r\nimport * as React from 'react';\r\nimport './IntegrationEditorLayout.css';\r\n/**\r\n * @param header - a PatternFly Wizard Steps component.\r\n * @param sidebar - the sidebar container takes the size of its content. If no\r\n * sidebar is defined, a layout with just the header, the footer and the body\r\n * will be shown.\r\n * @param content - the main content of the wizard. In case of overflow, only\r\n * the body will scroll.\r\n * @param onCancel - if passed, the Cancel button will be render as a `button`\r\n * and this callback will be used as its `onClick` handler.\r\n * @param onBack - if passed, the Back button will be render as a `button`\r\n * and this callback will be used as its `onClick` handler.\r\n * @param onNext - if passed, the Next button will be render as a `button`\r\n * and this callback will be used as its `onClick` handler.\r\n * @param cancelHref - if passed, the Cancel button will be render as a `Link`\r\n * using this as its `to` parameter.\r\n * @param backHref - if passed, the Back button will be render as a `Link`\r\n * using this as its `to` parameter.\r\n * @param nextHref - if passed, the Next button will be render as a `Link`\r\n * using this as its `to` parameter.\r\n * @param isNextLoading - if set to true, a `Loading` component will be shown\r\n * inside the Next button before its label. The button will also be disabled.\r\n * @param isNextDisabled - if set to true, the Next button will be disabled.\r\n * @param isLastStep - if set to true, it changes the Next button label to\r\n * 'Done'.\r\n */\r\nexport interface IIntegrationEditorLayoutProps {\r\n    header: JSX.Element;\r\n    sidebar?: JSX.Element;\r\n    content: JSX.Element;\r\n    onCancel?: (e: React.MouseEvent<any>) => void;\r\n    onBack?: (e: React.MouseEvent<any>) => void;\r\n    onNext?: (e: React.MouseEvent<any>) => void;\r\n    cancelHref?: H.LocationDescriptor;\r\n    backHref?: H.LocationDescriptor;\r\n    nextHref?: H.LocationDescriptor;\r\n    isNextDisabled?: boolean;\r\n    isNextLoading?: boolean;\r\n    isLastStep?: boolean;\r\n}\r\n/**\r\n * Provides the layout for the integration editor. It uses the PatternFly Wizard\r\n * component under the hood.\r\n * The footer is pre-defined and follows the PF Wizard pattern, with\r\n * Cancel/Previous/Next buttons.\r\n *\r\n * @todo in the CSS we use hardcoded values for the heights of various\r\n * elements of the page to be able to size the element to take all the available\r\n * height and show the right scrollbars.\r\n * We should really find a smarter way to handle this.\r\n */\r\nexport declare const IntegrationEditorLayout: React.FunctionComponent<IIntegrationEditorLayoutProps>;\r\n"}}
